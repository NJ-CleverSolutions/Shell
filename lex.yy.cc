#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
        do \
                { \
                /* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
                *yy_cp = (yy_hold_char); \
                YY_RESTORE_YY_MORE_OFFSET \
                (yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
                YY_DO_BEFORE_ACTION; /* set up yytext again */ \
                } \
        while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
        {
        FILE *yy_input_file;

        char *yy_ch_buf;                /* input buffer */
        char *yy_buf_pos;               /* current position in input buffer */

        /* Size of input buffer in bytes, not including room for EOB
         * characters.
         */
        int yy_buf_size;

        /* Number of characters read into yy_ch_buf, not including EOB
         * characters.
         */
        int yy_n_chars;

        /* Whether we "own" the buffer - i.e., we know we created it,
         * and can realloc() it to grow it, and should free() it to
         * delete it.
         */
        int yy_is_our_buffer;

        /* Whether this is an "interactive" input source; if so, and
         * if we're using stdio for input, then we want to use getc()
         * instead of fread(), to make sure we stop fetching input after
         * each newline.
         */
        int yy_is_interactive;

        /* Whether we're considered to be at the beginning of a line.
         * If so, '^' rules will be active on the next match, otherwise
         * not.
         */
        int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

        /* Whether to try to fill the input buffer when we reach the
         * end of it.
         */
        int yy_fill_buffer;

        int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
        /* When an EOF's been seen but there's still some text to process
         * then we mark the buffer as YY_EOF_PENDING, to indicate that we
         * shouldn't try reading from the input source any more.  We might
         * still have a bunch of tokens to match, though, because of
         * possible backing-up.
         *
         * When we actually see the EOF, we change the status to "new"
         * (via yyrestart()), so that the user can continue scanning by
         * just pointing yyin at a new input file.
         */
#define YY_BUFFER_EOF_PENDING 2

        };
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;          /* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
        { \
        if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
                YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
        } \
        YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
        }
#define yy_set_bol(at_bol) \
        { \
        if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
                YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
        } \
        YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
        }
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
        (yytext_ptr) = yy_bp; \
        yyleng = (int) (yy_cp - yy_bp); \
        (yy_hold_char) = *yy_cp; \
        *yy_cp = '\0'; \
        if ( yyleng >= YYLMAX ) \
                YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
        yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
        (yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 26
#define YY_END_OF_BUFFER 27
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
        {
        flex_int32_t yy_verify;
        flex_int32_t yy_nxt;
        };
static const flex_int16_t yy_accept[494] =
    {   0,
       17,   17,   27,   25,   24,   19,   25,   25,    8,   25,
       25,   25,    3,    1,   23,   25,   25,    2,    9,   25,
       25,   25,    0,   23,    0,   25,    0,   20,   25,   25,
        0,   23,    0,   25,   25,   25,    0,   23,   25,   25,
        0,   25,   21,   25,    0,   23,    0,   25,    4,    0,
        5,    6,   23,   23,   23,   23,   23,   25,   25,    0,
       10,   10,   10,    9,   10,   10,   10,   25,   20,    0,
       25,   20,   25,    0,   23,   25,   20,   25,   25,   20,
        0,   23,   23,    0,   20,   23,   25,   23,   23,    0,
       20,    0,    0,   25,    0,   21,   25,    0,   23,   23,

       23,   23,   23,   25,   25,   25,   25,    0,   25,   25,
       23,   25,    0,   17,   21,   25,   21,   25,    0,   23,
       25,   25,   21,    0,   21,   23,   23,   23,   21,   23,
       23,    0,   21,   25,    0,    7,   23,   23,   23,   25,
       25,    0,   11,   10,   10,   11,   10,   10,   10,   10,
       10,   11,   11,   11,   11,   11,   11,   11,   10,   11,
       10,   10,   10,   11,   10,   10,   10,   11,   20,    0,
       20,   25,   20,   23,   23,   20,   25,   23,   23,   25,
       20,   25,    0,   23,    0,   17,   25,   20,   25,   25,
        0,   20,   23,   23,   23,   20,   23,   23,   23,   23,

       20,   23,   23,   23,   20,   23,   23,    0,   20,    0,
        0,   21,   21,   21,   23,   23,   21,   23,   23,   23,
       14,   12,   17,   23,   17,   13,   25,   23,   23,   23,
       17,   15,   17,   17,   17,   17,   17,   17,   21,   21,
       23,   23,   21,   23,   23,   25,   21,   25,    0,   23,
        0,   17,   25,    0,   23,   21,   23,   23,    0,   23,
       18,   25,   11,   11,   11,   11,   11,   11,   11,   10,
       10,   11,   10,   10,   10,   10,   11,   10,   10,   10,
       10,   11,   10,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   10,   10,   11,   10,   10,   10,   20,   25,

       20,   23,   20,   23,   20,   25,   17,   20,   23,   17,
       23,   20,   25,   23,   23,    0,   17,   20,    0,   17,
       17,   17,   17,   17,   17,   17,   23,   23,   20,   23,
       23,   17,   21,   23,   23,   17,   17,   25,   17,   17,
       17,   21,   23,   21,   17,   21,   23,   17,   23,   21,
       23,   23,   17,   21,   17,   17,   17,   17,   17,   17,
       17,   23,   18,   25,   11,   11,   11,   11,   11,   10,
       11,   10,   11,   11,   11,   11,   11,   11,   11,   10,
       10,   10,   11,   10,   10,   10,   11,   10,   10,   10,
       11,   10,   10,   10,   11,   11,   11,   11,   11,   11,

       10,   20,   25,   17,   17,   17,   20,   23,   17,   17,
       17,   20,   23,   17,   17,   17,   17,   17,   20,    0,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       25,   17,   21,   23,   17,   17,   17,   17,   17,   17,
       17,   17,   25,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   10,
       10,   11,   10,   10,   11,   10,   10,   11,   11,   17,
       17,   17,   17,   17,   17,   17,   17,   25,   17,   17,
       22,   11,   11,   11,   11,   11,   11,   11,   10,   16,
       22,   11,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    1,    8,    9,   10,
       11,    1,    1,    1,    1,   12,   13,    1,    1,   14,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   15,
        1,   16,   17,    1,    1,    1,    1,    1,   18,    1,
        1,   19,    1,    1,    1,   20,    1,    1,    1,    1,
        1,    1,   21,    1,    1,    1,    1,    1,    1,    1,
        1,   22,    1,    1,   23,    1,    1,    1,   24,    1,

       25,    1,    1,    1,   26,    1,    1,    1,    1,    1,
       27,    1,    1,   28,   29,   30,   31,    1,    1,   32,
        1,    1,   33,   34,   35,   36,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[37] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    1,    1,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    8,    1,    9
    } ;

static const flex_int16_t yy_base[733] =
    {   0,
        0,    0,  342,   30,10388,10388,   63,   28,   46,   96,
       38,   70,   77,  124,   94,  152,  180,  331,  208,  107,
       27,   40,  113,  126,  327,  243,   35,  127,  276,  309,
      342,  375,  408,  105,  429,    0,  308,  140,  459,  493,
      315,  526,  159,  559,  592,  625,   69,  269,  143,   26,
      160,  183,  166,  194,  196,  191,  219,  653,  681,  266,
      709,  734,  163,  764,  794,  824,  144,  236,10388,   85,
      859,  211,  892,  925,  958,  991,  227, 1025, 1058,  250,
     1091, 1124, 1157,  131, 1190, 1223, 1256, 1289, 1322, 1355,
      288,  234, 1376, 1397,  265, 1430,   79, 1463, 1496,  253,

      252,  251,  269,  271,  285,  292,  110,  306,  317, 1519,
      349,  351,  234,  346,10388, 1553,  274,  386, 1586, 1619,
     1652, 1686,  287, 1719,  325, 1752, 1785, 1818,  382, 1851,
     1884,   54,  256,  203,  384,  401,  189,  410,  412, 1912,
     1940,  219, 1968, 1993,  423, 2018,  436, 2043, 2068,  238,
      452,  476, 2098, 2123,  483, 2153, 2183,  253, 2208, 2238,
     2268, 2298, 2323, 2353, 2383, 2413,   89,  414,  163,  481,
        0, 2448,  217, 2481, 2514, 2547, 2580, 2613, 2646, 2679,
      502, 2713, 2747, 2781, 2815, 2849, 2882, 2916, 2949, 2982,
     3015, 3049, 3082, 3115, 3148,  509,  203, 3181, 3214,    0,

      344,  199, 3247, 3280,  522,    0, 3314, 3347, 3381,  420,
     3402,  198,  551, 3423, 3456, 3489, 3522, 3555,    0,  182,
      542,  558,  422,  511,  566,  575, 3578,  586,  583,  623,
      639,  655,  182,  656,  445,  616,  679,  176,    0,  141,
     3612, 3645,  510, 3678, 3711, 3744,  684, 3778, 3812, 3846,
      504, 3880, 3913, 3947, 3981,  618, 4014, 4047,  548,  670,
     4079, 4110,  597, 4133,  640,  698, 4158,    0,  715,  726,
     4183, 4208,  751, 4233, 4258,  756, 4283, 4308, 4333,  287,
     4363,    0,  768,  781, 4388, 4413, 4443, 4473, 4498, 4528,
     4558,  121, 4583, 4608, 4638, 4668, 4693,  357, 4728, 4761,

     4794, 4827,  102, 4860,  301, 4893, 4927,  695, 4960, 4994,
     5027, 5061, 5095, 5129, 5163, 5197, 5231,   80, 5264, 5298,
     5319,  811, 5352, 5385, 5418, 5451, 5472,    0,  777,    0,
     5506, 5540, 5573, 5606,  807,  702,  798, 5629,  832,  845,
      852,   87, 5663,  439, 5696,  865, 5729, 5763, 5796,  868,
     5830, 5864, 5898,   61,  577, 5931,  885, 5964, 5997, 6030,
      750,    0,   90, 6058,  813, 6081,  898, 6106,  929,  932,
      922,  933, 6131,  937, 6156, 6181,  576, 6211, 6236, 6261,
     6291, 6316, 6341, 6366, 6391, 6421,  837,  869, 6451,  968,
     6481, 6511, 6541,  876,  974, 6566, 6591, 6621,    0,  942,

     6646, 6681, 6715, 6749,  608, 6782, 6815, 6849, 6883,  984,
     6916,  964, 6949, 6983, 7016, 1008,    0, 7049, 7082, 7116,
     7150,   48, 7171, 7192,    0, 7225,    0, 7258, 7291, 1010,
     7302,  692,  999,    0, 7336, 1033, 7369, 7402, 1041,    0,
     7435,   44, 7466, 1064, 1036, 1071, 7489, 7519,    0, 7544,
        0, 7574,  976, 7604, 1072, 7634, 7664, 1076, 7689, 7714,
     7744, 7774, 7804, 7834,    0, 7864,    0, 1083, 7889,    0,
     7924, 1110, 7957,    0,    0, 7990, 8011, 1034, 1111,    0,
        0, 8022, 8052, 8082,    0, 8112,    0, 8142, 8172, 1131,
        0, 8202,10388, 8238, 8247, 8256, 8265, 8274, 8283, 8292,

     8301, 8310, 8319, 8328, 8337, 8346, 8355, 8364, 8373, 8382,
     8391, 8400, 8409, 8418, 8427, 8436, 8445, 8454, 8463, 8472,
     8481, 8490, 8499, 8508, 8517, 8526, 8535, 8544, 8553, 8562,
     8571, 8580, 8589, 8598, 8607, 8616, 8625, 8634, 8643, 8652,
     8661, 8670, 8679, 8688, 8697, 8706, 8715, 8724, 8733, 8742,
     8751, 8760, 8769, 8778, 8787, 8796, 8805, 8814, 8823, 8832,
     8841, 8850, 8859, 8868, 8877, 8886, 8895, 8904, 8912, 8921,
     8930, 8939, 8948, 8957, 8966, 8975, 8984, 8993, 9002, 9011,
     9020, 9029, 9038, 9047, 9056, 9065, 9074, 9083, 9092, 9101,
     9110, 9119, 9128, 9137, 9146, 9155, 9164, 9173, 9182, 9191,

     9200, 9209, 9218, 9227, 9236, 9245, 9254, 9263, 9272, 9281,
     9290, 9299, 9308, 9317, 9326, 9335, 9344, 9353, 9362, 9371,
     9380, 9389, 9398, 9407, 9416, 9425, 9434, 9443, 9452, 9461,
     9470, 9479, 9487, 9496, 9505, 9514, 9523, 9532, 9541, 9550,
     9559, 9568, 9577, 9586, 9595, 9604, 9613, 9622, 9631, 9640,
     9649, 9658, 9667, 9676, 9685, 9694, 9703, 9712, 9721, 9730,
     9739, 9748, 9757, 9766, 9775, 9784, 9793, 9802, 9811, 9820,
     9829, 9838, 9847, 9856, 9865, 9874, 9883, 9892, 9901, 9910,
     9919, 9928, 9937, 9946, 9955, 9964, 9973, 9982, 9991,10000,
    10009,10018,10027,10036,10045,10054,10063,10072,10081,10090,

    10099,10108,10117,10126,10135,10144,10153,10162,10171,10180,
    10189,10198,10207,10216,10225,10234,10243,10252,10261,10270,
    10279,10288,10297,10306,10315,10324,10333,10342,10351,10360,
    10369,10378
    } ;

static const flex_int16_t yy_def[733] =
    {   0,
      493,    1,  493,  494,  493,  493,  495,  496,  494,  497,
      498,  494,  494,  499,  500,  494,  494,  501,  502,  494,
      496,  498,  499,  500,  501,  495,  503,  494,  504,  505,
      506,  507,  508,  496,  509,  510,  511,  512,  513,  497,
      514,  515,  494,  516,  517,  518,  519,  510,  499,  511,
      499,  499,  520,  500,  512,  520,  500,  494,  494,  493,
      502,  521,  522,  523,  524,  525,  526,  513,  493,  527,
      504,  496,  528,  529,  530,  531,  498,  528,  532,  499,
      529,  533,  534,  503,  534,  535,  505,  536,  507,  508,
      537,  503,  538,  539,  540,  539,  541,  542,  543,  544,

      512,  544,  512,  513,  513,  513,  545,  546,  513,  513,
      547,  513,  548,  549,  493,  550,  496,  551,  552,  553,
      554,  551,  498,  552,  499,  555,  556,  553,  557,  555,
      556,  558,  537,  545,  546,  499,  544,  559,  547,  560,
      560,  548,  561,  562,  563,  564,  565,  566,  567,  568,
      563,  569,  561,  564,  569,  570,  571,  572,  565,  570,
      573,  574,  566,  571,  573,  574,  568,  572,  575,  576,
      577,  578,  579,  580,  581,  581,  582,  583,  584,  585,
      586,  587,  588,  589,  590,  591,  587,  592,  582,  593,
      588,  594,  583,  595,  596,  597,  176,  594,  598,  176,

      599,  193,  584,  600,  601,  193,  595,  590,  602,  575,
      603,  604,  605,  606,  607,  608,  608,  607,  217,  609,
      610,  610,  611,  612,  613,  610,  586,  614,  612,  614,
      615,  610,  616,  610,  611,  613,  615,  616,  617,  579,
      618,  619,  599,  618,  619,  620,  586,  621,  622,  623,
      624,  625,  621,  622,  618,  601,  626,  623,  624,  612,
      627,  627,  628,  629,  628,  630,  631,  632,  630,  633,
      634,  631,  633,  634,  635,  636,  637,  638,  639,  640,
      641,  632,  636,  628,  637,  630,  642,  643,  631,  642,
      643,  632,  638,  633,  642,  644,  639,  640,  645,  646,

      647,  648,  649,  648,  650,  651,  652,  653,  654,  655,
      656,  656,  657,  658,  659,  660,  661,  662,  663,  664,
      665,  666,  652,  655,  667,  664,  658,  312,  668,  327,
      659,  661,  669,  669,  670,  671,  671,  672,  673,  671,
      673,  649,  674,  650,  675,  653,  676,  677,  678,  668,
      676,  678,  679,  662,  680,  681,  666,  675,  677,  679,
      680,  351,  493,  682,  683,  684,  683,  684,  683,  685,
      686,  687,  688,  686,  689,  690,  691,  692,  689,  693,
      694,  695,  690,  693,  695,  696,  691,  697,  698,  687,
      692,  694,  696,  697,  686,  689,  683,  699,  383,  691,

      693,  700,  701,  702,  703,  704,  705,  706,  707,  708,
      709,  710,  706,  707,  711,  712,  414,  713,  714,  715,
      716,  717,  718,  711,  424,  702,  414,  713,  716,  719,
      720,  703,  710,  351,  721,  708,  721,  722,  712,  437,
      722,  717,  723,  683,  724,  724,  725,  726,  383,  725,
      383,  727,  728,  692,  724,  726,  727,  728,  725,  693,
      729,  726,  729,  696,  457,  729,  464,  728,  725,  426,
      704,  719,  709,  414,  473,  716,  718,  720,  719,  437,
      730,  725,  731,  731,  457,  731,  457,  731,  729,  732,
      730,  731,    0,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493
    } ;

static const flex_int16_t yy_nxt[10425] =
    {   0,
        4,    5,    6,    5,    4,    7,    8,    9,   10,    4,
        4,   11,    4,   12,   13,   14,    4,    4,    4,    4,
        4,   15,    4,    4,   16,    4,    4,    4,   17,    4,
        4,    4,    4,   18,    4,   19,   21,   35,   36,   36,
       69,   22,   37,   37,   48,   23,   48,  100,   38,   38,
       60,   24,   21,   25,   60,   25,   70,   22,  135,   68,
       39,   23,  115,   25,   27,   27,   27,   24,   28,   29,
       41,   25,   41,   25,   30,  132,   21,  133,   31,   25,
       95,   22,   95,   21,   32,   49,  259,   27,   22,  213,
      169,   24,   23,  363,   95,  233,   33,   41,   24,   41,

       55,  282,   42,   25,   43,   22,  170,   44,  220,   56,
       25,   45,   95,   21,  233,   57,   36,   46,   22,   50,
       37,  298,   23,  220,   25,  113,   38,   25,   24,   47,
       50,   51,   55,   21,   53,   25,   69,   22,   22,   52,
       25,   56,   23,  113,  223,   53,   25,   57,   24,   50,
      167,   36,   70,  400,   25,  102,  168,   25,   21,   25,
       25,  103,  100,   22,   53,   21,   50,   23,   69,  151,
       22,   25,  137,   24,   23,  152,   25,   25,   67,   25,
       24,   53,   60,   58,   70,   25,   21,  138,   60,   50,
      136,   22,   25,   25,   25,   23,   67,  137,   22,   25,

       55,   24,   25,  220,   53,   22,   59,   36,  212,   56,
      220,  102,  138,   25,   62,   57,   25,  103,  113,   63,
       64,  260,   36,   65,   25,   55,   37,   25,  139,   66,
       22,  202,   38,   48,   56,  204,  113,  223,  100,   69,
       57,   67,   25,   20,   27,   27,   27,  107,   28,   29,
      282,  108,   25,  233,   30,   70,   50,  111,   31,  292,
       25,   25,   60,   36,   32,   25,  208,  102,  233,  113,
      114,   53,  220,  103,  220,  212,   33,   27,   27,   27,
       36,   72,  107,   25,  102,   36,  108,   73,   25,   37,
      103,   74,  111,   48,   60,   38,  107,   75,  142,  387,

      108,  134,   25,  107,  113,  114,  111,  108,   76,   27,
       27,   27,   27,  111,   77,   78,  113,  113,  113,  221,
       25,  388,  113,  115,   33,  113,  222,  224,  107,  100,
       79,   50,  108,   60,  113,  223,   25,   60,  111,  113,
      225,  493,   33,   27,   27,   27,   53,   80,   81,  493,
      113,  226,   21,   33,  493,   36,  493,  235,   25,  102,
      107,  236,  107,   82,  229,  103,  108,  237,  493,  387,
      230,  493,  111,  493,  493,   33,   84,   27,   84,  238,
       85,   86,  113,  231,  113,  232,   87,   41,   55,   41,
       88,  388,  113,   22,  239,  113,   89,   56,  493,  493,

      493,   41,  493,   57,  493,  224,  493,   50,   90,   27,
       27,   27,   25,   91,   92,   25,  137,  113,  225,   41,
      292,   25,   53,  107,  493,   69,   25,  229,   48,   93,
       95,  138,   95,  230,   25,  263,  493,  238,  150,   96,
       97,   70,  493,   25,   98,  113,  231,  150,  269,   25,
       99,   48,  208,  493,  113,  238,  150,  270,   36,  493,
      238,  493,   95,  105,  263,  106,  493,  150,  493,  150,
      107,   37,  113,  223,  108,  109,  493,  493,  238,  110,
      111,  112,  284,   27,  283,  150,  169,   36,   22,  284,
      493,  158,  113,  114,   41,   22,   41,  493,  158,   42,

      493,   43,  170,  493,   44,   41,  493,   41,   45,  158,
      493,   22,  354,  107,   46,   55,  158,  108,   22,  493,
       22,   36,  113,  111,   56,  102,   47,   41,  137,   41,
       57,  103,  335,   25,  117,  113,  114,  118,  355,  493,
      493,  119,   25,  138,  113,  336,  493,  120,   21,   41,
      493,   41,   95,  235,   95,   25,  354,  236,  121,   41,
       41,  213,   41,  237,   21,  122,   95,  123,  493,  235,
      493,  493,   50,  236,   47,  238,  493,  238,   41,  237,
       41,   21,  355,  132,   95,  442,  235,  337,  113,  493,
      236,  238,   47,   41,  113,   41,  237,  107,  124,  238,

      125,  229,  493,   47,  335,  493,  493,  230,  238,   36,
      453,  113,  268,  126,   48,  493,  113,  336,  493,  113,
      231,  493,   50,  238,  137,   47,   41,  238,   41,   25,
      268,  128,   36,  129,  107,  493,   44,  337,  229,  138,
      130,  238,  493,  493,  230,   55,  131,  493,  493,  238,
      235,   25,   36,  493,  340,  268,  113,  231,   47,   21,
      341,   21,   21,  493,   22,  493,  235,  235,   23,  493,
      236,  236,  238,  268,   24,   36,  237,  237,  140,  493,
      493,  113,  493,  493,  493,   55,   25,   21,  238,  238,
      235,  335,   22,  493,  340,  107,   23,  493,   48,  108,

      341,  493,   24,  113,  336,  111,  113,  238,  137,  268,
       37,  141,  238,  238,   25,   62,  224,  113,  114,  365,
       63,  143,  493,  430,   65,  238,  268,   37,  113,  225,
       66,  268,  493,   37,  493,  238,  365,  150,  369,  493,
      493,  493,   67,  493,   20,  145,  146,  370,  268,  147,
       37,   41,  493,   41,  493,  148,  132,  493,  442,  150,
      493,  102,  150,  369,  493,  493,  149,  150,  371,   34,
      154,  280,  370,  493,  493,  155,   20,  493,  493,  156,
      371,  493,  493,  280,  150,  157,  102,  493,  107,  280,
      372,  107,  229,   36,  493,  493,  268,  158,  230,   20,

      159,  280,  372,  107,  137,   67,  160,  493,  493,  238,
      113,  231,  493,  395,  268,  161,   36,   21,  113,  430,
      493,  493,  235,  493,  268,  102,  236,   67,  335,   23,
      163,  238,  237,  493,  444,   63,  164,  493,   55,  165,
      113,  336,  493,  235,  238,  166,  268,  340,  102,  113,
      493,  137,  493,  341,  493,  493,  238,   67,   55,   54,
       27,   27,   27,  235,   72,  238,  430,  340,  493,  493,
       73,  453,  113,  341,   74,  167,  113,  493,  238,  107,
       75,  468,  167,  229,  493,  238,  224,  493,  468,  230,
      493,   21,   27,   27,   27,   27,  235,  171,  113,  225,

      236,  113,  231,  493,  238,  493,  237,   27,  493,  268,
      102,  238,  493,  172,  493,  493,  493,  493,  238,  444,
      493,  493,  493,  493,  493,   27,   27,   27,   27,  493,
      173,  268,  493,  102,  107,  493,   27,  377,  493,  151,
      268,  102,  493,  150,  369,  446,  174,  493,  394,  107,
      444,  493,  377,  370,  113,  377,  445,  107,   27,   84,
       27,   84,  268,  176,  102,  150,  394,  102,  235,  177,
      377,  445,  107,  178,  151,  113,  453,  113,  493,  179,
      446,  493,  292,  394,  493,  335,  107,  493,  238,  377,
       50,   84,   27,   27,   27,  238,  181,  113,  336,  493,

      493,  394,  182,  235,  493,  337,  183,  377,  445,  107,
      113,  238,  184,  493,   55,  493,  137,  238,  493,  235,
      335,  238,  493,  340,  185,  186,   27,   27,   27,  341,
      171,  430,  113,  336,  493,  493,  493,  493,  493,   50,
       27,  238,  284,  238,  238,  107,  172,   55,  235,  108,
      493,  458,  235,  493,  337,  111,  340,  187,   27,   84,
       27,   84,  341,  188,  189,  493,  238,  113,  490,  458,
      493,  235,  493,   90,  238,  268,  102,  284,  284,  190,
      493,  493,  292,  235,  235,  444,  458,  458,  238,  292,
      493,   90,   27,   27,   27,  238,  173,  268,  493,  102,

      493,  493,   27,  493,  458,  458,  235,  235,  493,  493,
      493,  238,  174,  493,  493,  493,  137,  137,  238,  493,
      493,  238,  238,  191,   27,   84,   27,   84,  493,  192,
      193,  430,  430,  493,  493,   90,  493,   21,  493,  493,
      493,  493,  235,  238,  238,  194,  236,  493,  493,  493,
      493,  493,  237,  493,  493,  493,  493,   90,   27,   27,
       27,  493,  196,  197,  238,  493,  493,  493,   30,  493,
      493,  493,  198,  493,  493,  493,  493,  493,  199,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
       33,   27,   27,   27,  493,  196,  197,  493,  493,  493,

      493,   30,  493,  493,  493,  198,  493,  493,  493,  493,
      493,  199,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,   33,   27,   27,   27,  493,  201,  493,
      493,  493,  493,  493,   73,  493,  493,  493,  202,  493,
      493,  493,  493,  493,  203,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  204,   27,   27,   27,   27,
      493,   77,   78,  493,  493,  493,  493,  493,  493,  493,
      493,   33,  493,  493,  493,  493,  493,   79,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,   33,
       27,   27,   27,  493,  205,  206,  493,  493,  493,  493,

       33,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      207,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,   33,   84,   27,   84,  493,   85,   86,  493,
      493,  493,  493,   87,  493,  493,  493,   88,  493,  493,
      493,  493,  493,   89,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,   90,   27,   27,   27,  493,
       91,   92,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,   93,   84,   27,   84,
      493,  209,  210,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  211,   95,  493,

       95,  493,  493,  493,  493,  493,  493,   96,   97,  493,
      493,  493,   98,  493,  493,  493,  493,  493,   99,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
       95,   95,  493,   95,  493,  493,  493,  493,  493,  493,
       96,   97,  493,  493,  493,   98,  493,  493,  493,  493,
      493,   99,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,   95,   95,  493,   95,  493,  493,  493,
      493,  493,  493,  214,   95,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  215,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,   95,   95,  493,   95,

      493,  493,  493,  493,  493,  493,  217,   97,  493,  493,
      493,  218,  493,  493,  493,  493,  493,  219,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,   95,
      107,  493,  493,  493,  108,  493,  493,  227,  493,  493,
      111,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  113,  114,   41,  493,   41,  493,  493,  493,
      493,  117,  493,  493,  118,  493,  493,  493,  119,  493,
      493,  493,  493,  493,  120,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,   41,   41,  493,   41,
      493,  493,  493,  493,  240,  493,  493,   41,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  241,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,   41,
       41,  493,   41,  493,  493,  493,  493,  243,  493,  493,
      118,  493,  493,  493,  244,  493,  493,  493,  493,  493,
      245,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,   41,   41,  493,   41,  493,  493,  493,  493,
      247,  493,  493,  248,  493,  493,  493,  249,  493,  493,
      493,  493,  493,  250,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  251,  252,   41,  493,   41,
      493,  493,  493,  493,  239,  493,  493,  493,  493,  493,

      493,   41,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  253,   41,
       41,  493,   41,  493,  493,  493,  493,  240,  493,  493,
       41,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      241,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  254,   41,   41,  493,   41,  493,  493,  255,  493,
      256,  493,  493,   47,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  257,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,   47,   41,  493,   41,  493,
      493,  128,  493,  129,  493,  493,   44,  493,  493,  493,

      130,  493,  493,  493,  493,  493,  131,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,   47,   41,
      493,   41,  493,  493,  493,  493,  243,  493,  493,  118,
      493,  493,  493,  244,  493,  493,  493,  493,  493,  245,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      258,   41,   41,  493,   41,  493,  493,  255,  493,  256,
      493,  493,   47,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  257,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,   47,   41,  493,   41,  493,  493,
      128,  493,  129,  493,  493,   44,  493,  493,  493,  130,

      493,  493,  493,  493,  493,  131,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,   47,   21,  493,
      493,  493,  493,   22,  493,  493,  493,   23,  493,  493,
      493,  493,  493,   24,  493,  493,  493,  493,  493,  493,
      493,  261,  493,  493,  493,   25,   21,  493,  493,  493,
      493,   22,  493,  493,  493,   23,  493,  493,  493,  493,
      493,   24,  493,  493,  493,  493,  493,  262,  493,  493,
      493,  493,  493,   25,  154,  493,  493,  493,  493,  155,
       20,  493,  493,  156,  493,  493,  493,  493,  493,  157,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  158,  493,   20,  145,  146,  493,  493,  147,  493,
      493,  493,  493,  493,  148,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  150,  493,   34,  265,
       34,  493,  493,  266,  493,  493,  493,  493,  493,  267,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  268,  493,   34,  145,  272,  493,  493,  273,  493,
      493,  493,  493,  493,  274,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  150,  493,  101,  276,
      277,  493,  493,  278,  493,  493,  493,  493,  493,  279,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  280,  281,  104,  154,  493,  493,  493,  493,  155,
       20,  493,  493,  156,  493,  493,  493,  493,  493,  157,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  158,  493,   20,  265,   34,  493,  493,  266,  493,
      493,  493,  493,  493,  267,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  285,  268,  493,   34,  286,
      493,  493,  493,  493,  158,   23,  493,  493,  493,  493,
      493,  493,  493,  493,  287,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  158,  493,   23,  289,
      493,  493,  493,  493,  155,   54,  493,  493,  290,  493,

      493,  493,  493,  493,  291,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  158,  493,   54,  150,
      269,  493,  493,  493,  493,  493,  493,  493,  493,  270,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      293,  150,  493,   37,  286,  493,  493,  493,  493,  158,
       23,  493,  493,  493,  493,  493,  493,  493,  493,  287,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  158,  493,   23,  294,  493,  493,  493,  493,   67,
      295,  493,  493,  493,  493,  493,  493,  493,  493,  296,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,   67,  493,   56,  163,  493,  493,  493,  493,   63,
      164,  493,  493,  165,  493,  493,  493,  493,  493,  166,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,   67,  493,   54,  145,  272,  493,  493,  273,  493,
      493,  493,  493,  493,  274,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  297,  150,  493,  101,  289,
      493,  493,  493,  493,  155,   54,  493,  493,  290,  493,
      493,  493,  493,  493,  291,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  158,  493,   54,  294,
      493,  493,  493,  493,   67,  295,  493,  493,  493,  493,

      493,  493,  493,  493,  296,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,   67,  493,   56,  163,
      493,  493,  493,  493,   63,  164,  493,  493,  165,  493,
      493,  493,  493,  493,  166,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,   67,  493,   54,   84,
       27,   84,  493,  299,  493,  493,  493,  493,  493,  493,
      493,  493,  493,   84,  493,  493,  493,  493,  493,  300,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,   84,   84,   27,   84,  493,  301,  493,  493,  493,
      493,  493,   84,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  302,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,   84,   27,   27,   27,  493,  201,
      493,  493,  493,  493,  493,   73,  493,  493,  493,  202,
      493,  493,  493,  493,  493,  203,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,   27,   27,   27,
       27,  493,  201,  493,  493,  493,  493,  493,   73,  493,
      493,  493,  202,  493,  493,  493,  493,  493,  203,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
       27,   27,   27,   27,  493,  171,  493,  493,  493,  493,
      493,  493,  493,  493,  493,   27,  493,  493,  493,  493,

      493,  172,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,   27,   27,   27,   27,  493,  303,  493,
      493,  493,  493,  493,   27,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  304,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,   27,   84,   27,   84,
      493,  176,  493,  493,  493,  493,  493,  177,  493,  493,
      493,  178,  493,  493,  493,  493,  493,  179,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,   84,
       27,   27,   27,  493,  181,  493,  493,  493,  493,  493,
      182,  493,  493,  493,  183,  493,  493,  493,  493,  493,

      184,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  185,  186,   27,   27,   27,  493,  305,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  185,  493,
      493,  493,  493,  493,  306,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  185,  307,   27,   27,
       27,  493,  308,  493,  493,  493,  493,  493,  185,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  309,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      185,  310,   84,   27,   84,  493,  312,  493,  493,  493,
      493,  493,  313,  493,  493,  493,  314,  493,  493,  493,

      493,  493,  315,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  316,  317,   27,   27,   27,  493,
      318,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  319,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  320,
       27,   27,   27,  493,  322,   29,  493,  493,  493,  493,
      323,  493,  493,  493,  324,  493,  493,  493,  493,  493,
      325,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  326,   27,   27,   27,  493,  305,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  185,  493,  493,

      493,  493,  493,  306,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  185,  307,   27,   27,   27,
      493,   77,   78,  493,  493,  493,  493,  493,  493,  493,
      493,   33,  493,  493,  493,  493,  493,   79,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,   33,
       27,   27,   27,  493,  171,  493,  493,  493,  493,  493,
      493,  493,  493,  493,   27,  493,  493,  493,  493,  493,
      172,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  187,   27,   84,   27,   84,  493,  188,  189,  493,
      493,  493,  493,  493,  493,  493,  493,   90,  493,  493,

      493,  493,  493,  190,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,   90,   27,   27,   27,  493,
      308,  493,  493,  493,  493,  493,  185,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  309,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  185,  310,
       27,   27,   27,  493,  205,  206,  493,  493,  493,  493,
       33,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      207,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,   33,   27,   27,   27,  493,  303,  493,  493,
      493,  493,  493,   27,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  304,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  327,   27,   84,   27,   84,  493,
      192,  193,  493,  493,  493,  493,   90,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  194,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,   90,   27,
       27,   27,  493,  196,  197,  493,  493,  493,  493,   30,
      493,  493,  493,  198,  493,  493,  493,  493,  493,  199,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,   33,   27,   27,   27,  493,  205,  206,  493,  493,
      493,  493,   33,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  207,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,   33,   84,   27,   84,  493,   85,
       86,  493,  493,  493,  493,   87,  493,  493,  493,   88,
      493,  493,  493,  493,  493,   89,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,   90,   84,   27,
       84,  493,  176,  493,  493,  493,  493,  493,  177,  493,
      493,  493,  178,  493,  493,  493,  493,  493,  179,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
       84,   27,   27,   27,  493,  329,  493,  493,  493,  493,
      493,  182,  493,  493,  493,  330,  493,  493,  493,  493,

      493,  331,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  185,  332,   84,   27,   84,  493,  192,
      193,  493,  493,  493,  493,   90,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  194,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,   90,   27,   27,
       27,  493,  318,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  319,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  320,   27,   27,   27,  493,   91,   92,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,   93,   84,   27,   84,  493,  209,  210,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  211,   95,  493,   95,  493,  493,  493,
      493,  493,  493,  214,   95,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  215,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,   95,   95,  493,   95,
      493,  493,  493,  493,  493,  493,  333,   95,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  334,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,   95,
       95,  493,   95,  493,  493,  493,  493,  493,  493,  217,

       97,  493,  493,  493,  218,  493,  493,  493,  493,  493,
      219,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,   95,   95,  493,   95,  493,  493,  493,  493,
      493,  493,  217,   97,  493,  493,  493,  218,  493,  493,
      493,  493,  493,  219,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,   95,   95,  493,   95,  493,
      493,  493,  493,  493,  493,  333,   95,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  334,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,   95,  107,
      493,  493,  493,  108,  493,  338,  493,  493,  493,  111,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  113,  114,   41,  493,   41,  493,  493,  493,  493,
      342,  493,  493,   41,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  343,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,   41,   41,  493,   41,  493,
      493,  493,  493,  243,  493,  493,  118,  493,  493,  493,
      244,  493,  493,  493,  493,  493,  245,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,   41,   41,
      493,   41,  493,  493,  493,  493,  342,  493,  493,   41,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  343,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,   41,   41,  493,   41,  493,  493,  493,  493,  243,
      493,  493,  118,  493,  493,  493,  244,  493,  493,  493,
      493,  493,  245,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,   41,   41,  493,   41,  493,  493,
      493,  493,  247,  493,  493,  248,  493,  493,  493,  249,
      493,  493,  493,  493,  493,  250,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  251,  252,   41,
      493,   41,  493,  493,  493,  493,  344,  493,  493,  493,
      493,  493,  493,  251,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  251,  345,   41,  493,   41,  493,  493,  493,  493,
      346,  493,  493,  251,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  347,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  251,  348,   41,  493,   41,
      493,  493,  493,  493,  350,  493,  493,  248,  493,  493,
      493,  351,  493,  493,  493,  493,  493,  352,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  251,
      353,   41,  493,   41,  493,  493,   42,  493,  357,  493,
      493,  358,  493,  493,  493,  359,  493,  493,  493,  493,

      493,  360,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  361,   41,  493,   41,  493,  493,  493,
      493,  344,  493,  493,  493,  493,  493,  493,  251,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  251,  345,   41,  493,
       41,  493,  493,  493,  493,  346,  493,  493,  251,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  347,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      251,  348,   41,  493,   41,  493,  493,  493,  493,  342,
      493,  493,   41,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  343,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  362,   41,   41,  493,   41,  493,  493,
      255,  493,  256,  493,  493,   47,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  257,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,   47,   41,  493,
       41,  493,  493,  493,  493,  350,  493,  493,  248,  493,
      493,  493,  351,  493,  493,  493,  493,  493,  352,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      251,  353,  363,  493,  493,   21,  493,  493,  493,  493,
       22,  493,  493,  493,   23,  493,  493,  493,  493,  493,

       24,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,   25,  493,  493,  493,   21,  493,  493,  493,
      493,   22,  493,  493,  493,   23,  493,  493,  493,  493,
      493,   24,  493,  364,  493,  493,  493,  493,  493,  493,
      493,  493,  493,   25,  265,   34,  493,  493,  266,  493,
      493,  493,  493,  493,  267,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  268,  493,   34,  265,
      101,  493,  493,  367,  493,  493,  493,  493,  493,  368,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  268,  493,  101,  145,  272,  493,  493,  273,  493,

      493,  493,  493,  493,  274,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  150,  493,  101,  265,
      101,  493,  493,  367,  493,  493,  493,  493,  493,  368,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  268,  493,  101,  145,  272,  493,  493,  273,  493,
      493,  493,  493,  493,  274,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  150,  493,  101,  276,
      277,  493,  493,  278,  493,  493,  493,  493,  493,  279,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  280,  281,  104,  374,  104,  493,  493,  375,  493,

      493,  493,  493,  493,  376,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  377,  378,  104,  280,
      379,  493,  493,  493,  493,  493,  493,  493,  493,  380,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  280,  381,  108,  276,  383,  493,  493,  384,  493,
      493,  493,  493,  493,  385,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  280,  386,  228,   62,
      493,  493,  493,  493,  390,  391,  493,  493,  392,  493,
      493,  493,  493,  493,  393,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  394,  493,  234,  374,

      104,  493,  493,  375,  493,  493,  493,  493,  493,  376,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  377,  378,  104,  268,   37,  493,  493,  493,  493,
      493,  493,  493,  493,  365,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  396,  268,  493,   37,  397,
      493,  493,  493,  493,  158,   56,  493,  493,  493,  493,
      493,  493,  493,  493,  398,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  158,  493,   56,  289,
      493,  493,  493,  493,  155,   54,  493,  493,  290,  493,
      493,  493,  493,  493,  291,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  158,  493,   54,  265,
      101,  493,  493,  367,  493,  493,  493,  493,  493,  368,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      399,  268,  493,  101,  397,  493,  493,  493,  493,  158,
       56,  493,  493,  493,  493,  493,  493,  493,  493,  398,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  158,  493,   56,  289,  493,  493,  493,  493,  155,
       54,  493,  493,  290,  493,  493,  493,  493,  493,  291,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  158,  493,   54,  280,  379,  493,  493,  493,  493,

      493,  493,  493,  493,  380,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  280,  381,  108,  150,
      369,  493,  493,  493,  493,  493,  493,  493,  493,  370,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      401,  150,  493,  102,  397,  493,  493,  493,  493,  158,
       56,  493,  493,  493,  493,  493,  493,  493,  493,  398,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  158,  493,   56,  294,  493,  493,  493,  493,   67,
      295,  493,  493,  493,  493,  493,  493,  493,  493,  296,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,   67,  493,   56,  276,  383,  493,  493,  384,  493,
      493,  493,  493,  493,  385,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  280,  386,  228,   27,
       27,   27,  493,  171,  493,  493,  493,  493,  493,  493,
      493,  493,  493,   27,  493,  493,  493,  493,  493,  172,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,   27,   84,   27,   84,  493,  299,  493,  493,  493,
      493,  493,  493,  493,  493,  493,   84,  493,  493,  493,
      493,  493,  300,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,   84,   27,   27,   27,  493,  303,

      493,  493,  493,  493,  493,   27,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  304,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,   27,   84,   27,
       84,  493,  301,  493,  493,  493,  493,  493,   84,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  302,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
       84,   84,   27,   84,  493,  301,  493,  493,  493,  493,
      493,   84,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  302,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,   84,   84,   27,   84,  493,  402,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  316,  493,
      493,  493,  493,  493,  403,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  316,  404,   27,   27,
       27,  493,  405,   78,  493,  493,  493,  493,  493,  493,
      493,  493,  326,  493,  493,  493,  493,  493,  406,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      326,   84,   27,   84,  493,  407,  493,  493,  493,  493,
      493,  316,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  408,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  316,  409,   27,   27,   27,  493,  410,

       81,  493,  493,  493,  493,  326,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  411,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  326,   27,   27,
       27,  493,  329,  493,  493,  493,  493,  493,  182,  493,
      493,  493,  330,  493,  493,  493,  493,  493,  331,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      185,  332,   27,   27,   27,  493,  329,  493,  493,  493,
      493,  493,  182,  493,  493,  493,  330,  493,  493,  493,
      493,  493,  331,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  185,  332,   27,   27,   27,  493,

      305,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      185,  493,  493,  493,  493,  493,  306,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  185,  307,
       27,   27,   27,  493,  412,  493,  493,  493,  493,  493,
      185,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      413,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  185,  414,   84,   27,   84,  493,  312,  493,
      493,  493,  493,  493,  313,  493,  493,  493,  314,  493,
      493,  493,  493,  493,  315,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  316,  317,   27,   27,

       27,  493,  318,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  319,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  320,   27,   27,   27,  493,  416,  197,  493,  493,
      493,  493,  323,  493,  493,  493,  417,  493,  493,  493,
      493,  493,  418,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  326,   84,   27,   84,  493,  419,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  420,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  421,   27,

       27,   27,  493,  422,   92,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  423,
       27,   27,   27,  493,  322,   29,  493,  493,  493,  493,
      323,  493,  493,  493,  324,  493,  493,  493,  493,  493,
      325,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  326,   27,   27,   27,  493,  405,   78,  493,
      493,  493,  493,  493,  493,  493,  493,  326,  493,  493,
      493,  493,  493,  406,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  326,   27,   27,   27,  493,
      410,   81,  493,  493,  493,  493,  326,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  411,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  326,   84,
       27,   84,  493,  425,   86,  493,  493,  493,  493,  426,
      493,  493,  493,  427,  493,  493,  493,  493,  493,  428,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  429,   27,   27,   27,  493,  422,   92,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  423,   27,   27,   27,  493,  412,  493,  493,
      493,  493,  493,  185,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  413,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  185,  414,   84,   27,   84,
      493,  312,  493,  493,  493,  493,  493,  313,  493,  493,
      493,  314,  493,  493,  493,  493,  493,  315,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  316,
      317,   27,   27,   27,  493,  416,  197,  493,  493,  493,
      493,  323,  493,  493,  493,  417,  493,  493,  493,  493,
      493,  418,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  326,   95,  493,   95,  493,  493,  493,
      493,  493,  493,  333,   95,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  334,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,   95,   95,  493,   95,
      493,  493,  493,  493,  493,  493,  333,   95,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  334,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,   95,
      107,  493,  493,  493,  108,  493,  493,  493,  431,  493,
      111,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  113,  114,   41,  493,   41,  493,  493,  493,
      493,  342,  493,  493,   41,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  343,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,   41,   41,  493,   41,

      493,  493,  122,  493,  432,  493,  493,  493,  493,  493,
      493,  361,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  361,
       41,  493,   41,  493,  493,  493,  493,  433,  493,  493,
      251,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      434,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  251,  435,   41,  493,   41,  493,  493,  124,
      493,  436,  493,  493,  361,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  437,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  361,   41,  493,   41,

      493,  493,  493,  493,  350,  493,  493,  248,  493,  493,
      493,  351,  493,  493,  493,  493,  493,  352,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  251,
      353,   41,  493,   41,  493,  493,  493,  493,  433,  493,
      493,  251,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  434,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  251,  435,   41,  493,   41,  493,  493,
      493,  493,  350,  493,  493,  248,  493,  493,  493,  351,
      493,  493,  493,  493,  493,  352,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  251,  353,   41,

      493,   41,  493,  493,  128,  493,  439,  493,  493,  358,
      493,  493,  493,  440,  493,  493,  493,  493,  493,  441,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  361,   41,  493,   41,  493,  493,   42,  493,  357,
      493,  493,  358,  493,  493,  493,  359,  493,  493,  493,
      493,  493,  360,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  361,   41,  493,   41,  493,  493,
      122,  493,  432,  493,  493,  493,  493,  493,  493,  361,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  361,   41,  493,

       41,  493,  493,  124,  493,  436,  493,  493,  361,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  437,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      361,   41,  493,   41,  493,  493,  128,  493,  439,  493,
      493,  358,  493,  493,  493,  440,  493,  493,  493,  493,
      493,  441,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  361,   21,  493,  493,  493,  493,   22,
      493,  493,  493,   23,  493,  493,  493,  493,  493,   24,
      493,  493,  443,  493,  493,  493,  493,  493,  493,  493,
      493,   25,  265,  101,  493,  493,  367,  493,  493,  493,

      493,  493,  368,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  268,  493,  101,  265,  101,  493,
      493,  367,  493,  493,  493,  493,  493,  368,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  268,
      493,  101,  374,  104,  493,  493,  375,  493,  493,  493,
      493,  493,  376,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  377,  378,  104,  377,  108,  493,
      493,  493,  493,  493,  493,  493,  493,  447,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  377,
      448,  108,  374,  228,  493,  493,  450,  493,  493,  493,

      493,  493,  451,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  377,  452,  228,  154,  493,  493,
      493,  493,  455,  234,  493,  493,  456,  493,  493,  493,
      493,  493,  457,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  458,  493,  234,  377,  108,  493,
      493,  493,  493,  493,  493,  493,  493,  447,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  377,
      448,  108,  280,  459,  493,  493,  493,  493,  493,  493,
      493,  493,  460,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  280,  461,  229,  159,  493,  493,

      493,  493,  394,  462,  493,  493,  493,  493,  493,  493,
      493,  493,  463,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  394,  493,  236,  276,  383,  493,
      493,  384,  493,  493,  493,  493,  493,  385,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  280,
      386,  228,  374,  228,  493,  493,  450,  493,  493,  493,
      493,  493,  451,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  377,  452,  228,  280,  459,  493,
      493,  493,  493,  493,  493,  493,  493,  460,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  280,

      461,  229,  276,  383,  493,  493,  384,  493,  493,  493,
      493,  493,  385,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  280,  386,  228,  163,  493,  493,
      493,  493,  390,  465,  493,  493,  466,  493,  493,  493,
      493,  493,  467,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  394,  493,  339,   62,  493,  493,
      493,  493,  390,  391,  493,  493,  392,  493,  493,  493,
      493,  493,  393,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  394,  493,  234,  154,  493,  493,
      493,  493,  455,  234,  493,  493,  456,  493,  493,  493,

      493,  493,  457,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  458,  493,  234,  159,  493,  493,
      493,  493,  394,  462,  493,  493,  493,  493,  493,  493,
      493,  493,  463,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  394,  493,  236,  163,  493,  493,
      493,  493,  390,  465,  493,  493,  466,  493,  493,  493,
      493,  493,  467,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  394,  493,  339,  377,  108,  493,
      493,  493,  493,  493,  493,  493,  493,  447,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  377,

      448,  108,  268,  102,  493,  493,  493,  493,  493,  493,
      493,  493,  444,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  469,  268,  493,  102,  397,  493,  493,
      493,  493,  158,   56,  493,  493,  493,  493,  493,  493,
      493,  493,  398,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  158,  493,   56,  280,  459,  493,
      493,  493,  493,  493,  493,  493,  493,  460,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  280,
      461,  229,   27,   27,   27,  493,  305,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  185,  493,  493,  493,

      493,  493,  306,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  185,  307,   84,   27,   84,  493,
      402,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      316,  493,  493,  493,  493,  493,  403,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  316,  404,
       27,   27,   27,  493,  405,   78,  493,  493,  493,  493,
      493,  493,  493,  493,  326,  493,  493,  493,  493,  493,
      406,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  326,   84,   27,   84,  493,  470,  189,  493,
      493,  493,  493,  493,  493,  493,  493,  429,  493,  493,

      493,  493,  493,  471,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  429,   27,   27,   27,  493,
      412,  493,  493,  493,  493,  493,  185,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  413,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  185,  414,
       84,   27,   84,  493,  407,  493,  493,  493,  493,  493,
      316,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      408,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  316,  409,   27,   27,   27,  493,  472,  206,
      493,  493,  493,  493,  326,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  473,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  326,   84,   27,   84,
      493,  474,  193,  493,  493,  493,  493,  429,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  475,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  429,
       84,   27,   84,  493,  407,  493,  493,  493,  493,  493,
      316,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      408,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  316,  409,   27,   27,   27,  493,  472,  206,
      493,  493,  493,  493,  326,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  473,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  326,   27,   27,   27,
      493,  416,  197,  493,  493,  493,  493,  323,  493,  493,
      493,  417,  493,  493,  493,  493,  493,  418,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  326,
       84,   27,   84,  493,  425,   86,  493,  493,  493,  493,
      426,  493,  493,  493,  427,  493,  493,  493,  493,  493,
      428,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  429,   27,   27,   27,  493,  318,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  319,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  320,   84,   27,   84,
      493,  419,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  420,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      421,   27,   27,   27,  493,  422,   92,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  423,   84,   27,   84,  493,  476,  210,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  477,   27,   27,   27,  493,  416,  197,  493,

      493,  493,  493,  323,  493,  493,  493,  417,  493,  493,
      493,  493,  493,  418,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  326,   27,   27,   27,  493,
      405,   78,  493,  493,  493,  493,  493,  493,  493,  493,
      326,  493,  493,  493,  493,  493,  406,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  326,   84,
       27,   84,  493,  425,   86,  493,  493,  493,  493,  426,
      493,  493,  493,  427,  493,  493,  493,  493,  493,  428,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  429,   27,   27,   27,  493,  422,   92,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  423,  107,  493,  493,  493,  108,  493,  493,
      493,  478,  493,  111,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  113,  114,   41,  493,   41,
      493,  493,  255,  493,  479,  493,  493,  361,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  480,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  361,
       41,  493,   41,  493,  493,  255,  493,  479,  493,  493,
      361,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      480,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  361,   41,  493,   41,  493,  493,  128,  493,
      439,  493,  493,  358,  493,  493,  493,  440,  493,  493,
      493,  493,  493,  441,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  361,   41,  493,   41,  493,
      493,  128,  493,  439,  493,  493,  358,  493,  493,  493,
      440,  493,  493,  493,  493,  493,  441,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  361,  481,
      493,  493,   21,  493,  493,  493,  493,   22,  493,  493,
      493,   23,  493,  493,  493,  493,  493,   24,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,   25,

      377,  229,  493,  493,  493,  493,  493,  493,  493,  493,
      482,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  377,  483,  229,  286,  493,  493,  493,  493,
      458,  236,  493,  493,  493,  493,  493,  493,  493,  493,
      484,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  458,  493,  236,  377,  229,  493,  493,  493,
      493,  493,  493,  493,  493,  482,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  377,  483,  229,
      289,  493,  493,  493,  493,  455,  339,  493,  493,  486,
      493,  493,  493,  493,  493,  487,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  458,  493,  339,
      154,  493,  493,  493,  493,  455,  234,  493,  493,  456,
      493,  493,  493,  493,  493,  457,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  458,  493,  234,
      286,  493,  493,  493,  493,  458,  236,  493,  493,  493,
      493,  493,  493,  493,  493,  484,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  458,  493,  236,
      289,  493,  493,  493,  493,  455,  339,  493,  493,  486,
      493,  493,  493,  493,  493,  487,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  458,  493,  339,

      377,  229,  493,  493,  493,  493,  493,  493,  493,  493,
      482,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  377,  483,  229,  280,  459,  493,  493,  493,
      493,  493,  493,  493,  493,  460,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  280,  461,  229,
      294,  493,  493,  493,  493,  394,  488,  493,  493,  493,
      493,  493,  493,  493,  493,  489,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  394,  493,  340,
      286,  493,  493,  493,  493,  458,  236,  493,  493,  493,
      493,  493,  493,  493,  493,  484,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  458,  493,  236,
      294,  493,  493,  493,  493,  394,  488,  493,  493,  493,
      493,  493,  493,  493,  493,  489,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  394,  493,  340,
      163,  493,  493,  493,  493,  390,  465,  493,  493,  466,
      493,  493,  493,  493,  493,  467,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  394,  493,  339,
      294,  493,  493,  493,  493,  394,  488,  493,  493,  493,
      493,  493,  493,  493,  493,  489,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  394,  493,  340,

      377,  229,  493,  493,  493,  493,  493,  493,  493,  493,
      482,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  377,  483,  229,   84,   27,   84,  493,  470,
      189,  493,  493,  493,  493,  493,  493,  493,  493,  429,
      493,  493,  493,  493,  493,  471,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  429,   84,   27,
       84,  493,  474,  193,  493,  493,  493,  493,  429,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  475,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      429,   27,   27,   27,  493,  422,   92,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  423,   84,   27,   84,  493,  476,  210,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  477,  377,  229,  493,  493,  493,  493,  493,
      493,  493,  493,  482,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  377,  483,  229,  397,  493,
      493,  493,  493,  458,  340,  493,  493,  493,  493,  493,
      493,  493,  493,  492,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  458,  493,  340,  397,  493,
      493,  493,  493,  458,  340,  493,  493,  493,  493,  493,

      493,  493,  493,  492,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  458,  493,  340,  397,  493,
      493,  493,  493,  458,  340,  493,  493,  493,  493,  493,
      493,  493,  493,  492,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  458,  493,  340,  397,  493,
      493,  493,  493,  458,  340,  493,  493,  493,  493,  493,
      493,  493,  493,  492,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  458,  493,  340,  294,  493,
      493,  493,  493,  394,  488,  493,  493,  493,  493,  493,
      493,  493,  493,  489,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  394,  493,  340,  397,  493,
      493,  493,  493,  458,  340,  493,  493,  493,  493,  493,
      493,  493,  493,  492,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  458,  493,  340,   20,  493,
      493,  493,   20,   20,   20,   20,   20,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   34,  493,  493,  493,
       34,   34,   34,  493,   34,   40,   40,  493,   40,   40,
       40,   40,   40,   40,   22,  493,  493,  493,   22,   22,
       22,   22,   22,   23,  493,  493,  493,   23,   23,   23,
       23,   23,   54,  493,  493,  493,   54,   54,   54,   54,

       54,   25,  493,  493,  493,   25,   25,   25,   25,   25,
       61,  493,  493,  493,   61,   61,   61,   61,   61,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   94,   94,  493,   94,   94,   94,   94,
       94,   94,   36,  493,  493,  493,   36,   36,  493,  493,
       36,   37,  493,  493,  493,  493,   37,   37,  493,   37,

      101,  493,  493,  493,  101,  101,  101,  493,  101,  104,
      493,  493,  493,  104,  104,  104,  104,  104,   41,   41,
      493,   41,   41,   41,   41,   41,   41,  116,  116,  493,
      116,  116,  116,  116,  116,  116,   44,   44,  493,   44,
       44,   44,   44,   44,   44,   45,   45,  493,   45,   45,
       45,   45,   45,   45,  127,  127,  493,  127,  127,  127,
      127,  127,  127,   47,   47,  493,   47,   47,   47,   47,
       47,   47,   56,  493,  493,  493,   56,   56,   56,   56,
       56,  144,  493,  493,  493,  144,  144,  144,  144,  144,
       63,  493,  493,  493,   63,   63,   63,   63,   63,  153,

      493,  493,  493,  153,  153,  153,  153,  153,   65,  493,
      493,  493,   65,   65,   65,   65,   65,  162,  493,  493,
      493,  162,  162,  162,  162,  162,   67,  493,  493,  493,
       67,   67,   67,   67,   67,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   74,   74,   74,   74,   74,   74,   74,
       74,   74,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  180,  180,  180,  180,  180,  180,  180,  180,  180,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   88,
       88,   88,   88,   88,   88,   88,   88,   88,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  198,  198,  198,  198,
      198,  198,  198,  198,  198,   25,  493,  493,  493,   25,
       25,   25,   25,   25,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   94,   94,  493,   94,   94,   94,   94,
       94,   94,   95,   95,  493,   95,   95,   95,   95,   95,
       95,   97,   97,  493,   97,   97,   97,   97,   97,   97,
       98,   98,  493,   98,   98,   98,   98,   98,   98,  216,
      216,  493,  216,  216,  216,  216,  216,  216,  102,  493,
      493,  493,  493,  102,  102,  493,  102,  107,  493,  493,

      493,  107,  107,  107,  107,  107,  108,  493,  493,  493,
      108,  108,  108,  108,  108,  228,  493,  493,  493,  228,
      228,  228,  228,  228,  113,  493,  493,  493,  113,  113,
      113,  113,  113,  234,  493,  493,  493,  234,  234,  234,
      234,  234,  116,  116,  493,  116,  116,  116,  116,  116,
      116,  118,  118,  493,  118,  118,  118,  118,  118,  118,
      119,  119,  493,  119,  119,  119,  119,  119,  119,  242,
      242,  493,  242,  242,  242,  242,  242,  242,  246,  246,
      493,  246,  246,  246,  246,  246,  246,  130,  130,  493,
      130,  130,  130,  130,  130,  130,  127,  127,  493,  127,

      127,  127,  127,  127,  127,   54,  493,  493,  493,   54,
       54,   54,   54,   54,   41,   41,  493,   41,   41,   41,
       41,   41,   41,   56,  493,  493,  493,   56,   56,   56,
       56,   56,   20,  493,  493,  493,   20,   20,   20,   20,
       20,  153,  493,  493,  493,  153,  153,  153,  153,  153,
      144,  493,  493,  493,  144,  144,  144,  144,  144,  145,
      493,  493,  493,  145,  145,  145,  145,  145,  264,  493,
      493,  493,  264,  264,  264,  264,  264,  147,  493,  493,
      493,  147,  147,  147,  147,  147,  271,  493,  493,  493,
      271,  271,  271,  271,  271,  275,  493,  493,  493,  275,

      275,  275,  275,  275,  150,  493,  493,  493,  150,  150,
      150,  150,  155,  493,  493,  493,  155,  155,  155,  155,
      155,  156,  493,  493,  493,  156,  156,  156,  156,  156,
      288,  493,  493,  493,  288,  288,  288,  288,  288,  158,
      493,  493,  493,  158,  158,  158,  158,  158,  165,  493,
      493,  493,  165,  165,  165,  165,  165,  162,  493,  493,
      493,  162,  162,  162,  162,  162,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   36,  493,  493,  493,   36,   36,
      493,  493,   36,  177,  177,  177,  177,  177,  177,  177,

      177,  177,   37,  493,  493,  493,  493,   37,   37,  493,
       37,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      200,  200,  200,  200,  200,  200,  200,  200,  200,   73,
       73,   73,   73,   73,   73,   73,   73,   73,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  104,  493,  493,  493,  104,
      104,  104,  104,  104,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  311,  311,  311,  311,  311,  311,  311,  311,

      311,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      321,  321,  321,  321,  321,  321,  321,  321,  321,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   87,   87,
       87,   87,   87,   87,   87,   87,   87,  198,  198,  198,
      198,  198,  198,  198,  198,  198,   88,   88,   88,   88,
       88,   88,   88,   88,   88,  195,  195,  195,  195,  195,
      195,  195,  195,  195,   54,  493,  493,  493,   54,   54,
       54,   54,   54,   83,   83,   83,   83,   83,   83,   83,
       83,   83,  101,  493,  493,  493,  101,  101,  101,  493,
      101,  328,  328,  328,  328,  328,  328,  328,  328,  328,

       56,  493,  493,  493,   56,   56,   56,   56,   56,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   95,   95,  493,
       95,   95,   95,   95,   95,   95,   97,   97,  493,   97,
       97,   97,   97,   97,   97,   98,   98,  493,   98,   98,
       98,   98,   98,   98,  218,  218,  493,  218,  218,  218,
      218,  218,  218,  216,  216,  493,  216,  216,  216,  216,
      216,  216,  102,  493,  493,  493,  493,  102,  102,  493,
      102,  234,  493,  493,  493,  234,  234,  234,  234,  234,
      235,  493,  493,  493,  235,  235,  235,  235,  235,  229,

      493,  493,  493,  229,  229,  229,  229,  229,  236,  493,
      493,  493,  236,  236,  236,  236,  236,  228,  493,  493,
      493,  228,  228,  228,  228,  228,  339,  493,  493,  493,
      339,  339,  339,  339,  339,  238,  493,  493,  493,  238,
      238,  238,  238,  238,   36,  493,  493,  493,   36,   36,
      493,  493,   36,  244,  244,  493,  244,  244,  244,  244,
      244,  244,  242,  242,  493,  242,  242,  242,  242,  242,
      242,  246,  246,  493,  246,  246,  246,  246,  246,  246,
      248,  248,  493,  248,  248,  248,  248,  248,  248,  249,
      249,  493,  249,  249,  249,  249,  249,  249,  349,  349,

      493,  349,  349,  349,  349,  349,  349,  251,  251,  493,
      251,  251,  251,  251,  251,  251,  356,  356,  493,  356,
      356,  356,  356,  356,  356,  130,  130,  493,  130,  130,
      130,  130,  130,  130,   20,  493,  493,   20,   20,   20,
       20,   20,   20,  265,  493,  493,  493,  265,  265,  265,
      265,  265,  264,  493,  493,  493,  264,  264,  264,  264,
      264,  266,  493,  493,  493,  266,  266,  266,  266,  266,
      366,  493,  493,  493,  366,  366,  366,  366,  366,  268,
      493,  493,  493,  268,  493,  268,  268,  273,  493,  493,
      493,  273,  273,  273,  273,  273,  271,  493,  493,  493,

      271,  271,  271,  271,  271,  275,  493,  493,  493,  275,
      275,  275,  275,  275,  276,  493,  493,  493,  276,  276,
      276,  276,  276,  373,  493,  493,  493,  373,  373,  373,
      373,  373,  278,  493,  493,  493,  278,  278,  278,  278,
      278,  382,  493,  493,  493,  382,  382,  382,  382,  382,
      280,  493,  493,  493,  280,  280,  280,  280,  280,  389,
      493,  493,  493,  389,  389,  389,  389,  389,  290,  493,
      493,  493,  290,  290,  290,  290,  290,  288,  493,  493,
      493,  288,  288,  288,  288,  288,  165,  493,  493,  493,
      165,  165,  165,  165,  165,   73,   73,   73,   73,   73,

       73,   73,   73,   73,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  102,  493,  493,  493,  493,  102,  102,  493,  102,
      107,  493,  493,  493,  107,  107,  107,  107,  107,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  108,  493,  493,
      493,  108,  108,  108,  108,  108,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  328,  328,  328,  328,  328,  328,

      328,  328,  328,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  113,  493,
      493,  493,  113,  113,  113,  113,  113,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  234,  493,  493,  493,  234,  234,
      234,  234,  234,  424,  424,  424,  424,  424,  424,  424,

      424,  424,  228,  493,  493,  493,  228,  228,  228,  228,
      228,  218,  218,  493,  218,  218,  218,  218,  218,  218,
      229,  493,  493,  493,  229,  229,  229,  229,  229,  340,
      493,  493,  493,  340,  340,  340,  340,  340,  104,  493,
      493,  493,  104,  104,  104,  104,  104,  339,  493,  493,
      493,  339,  339,  339,  339,  339,  244,  244,  493,  244,
      244,  244,  244,  244,  244,  358,  358,  493,  358,  358,
      358,  358,  358,  358,  351,  351,  493,  351,  351,  351,
      351,  351,  351,  359,  359,  493,  359,  359,  359,  359,
      359,  359,  349,  349,  493,  349,  349,  349,  349,  349,

      349,  438,  438,  493,  438,  438,  438,  438,  438,  438,
      361,  361,  493,  361,  361,  361,  361,  361,  361,  356,
      356,  493,  356,  356,  356,  356,  356,  356,   20,  493,
      493,  493,   20,   20,   20,   20,   20,  367,  493,  493,
      493,  367,  367,  367,  367,  367,  366,  493,  493,  493,
      366,  366,  366,  366,  366,  273,  493,  493,  493,  273,
      273,  273,  273,  273,  374,  493,  493,  493,  374,  374,
      374,  374,  374,  390,  493,  493,  493,  390,  390,  390,
      390,  390,  373,  493,  493,  493,  373,  373,  373,  373,
      373,  375,  493,  493,  493,  375,  375,  375,  375,  375,

      449,  493,  493,  493,  449,  449,  449,  449,  449,  377,
      493,  493,  493,  377,  377,  377,  377,  377,  454,  493,
      493,  493,  454,  454,  454,  454,  454,  384,  493,  493,
      493,  384,  384,  384,  384,  384,  392,  493,  493,  493,
      392,  392,  392,  392,  392,  382,  493,  493,  493,  382,
      382,  382,  382,  382,  464,  493,  493,  493,  464,  464,
      464,  464,  464,  394,  493,  493,  493,  394,  394,  394,
      394,  394,  389,  493,  493,  493,  389,  389,  389,  389,
      389,  290,  493,  493,  493,  290,  290,  290,  290,  290,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  313,

      313,  313,  313,  313,  313,  313,  313,  313,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  235,  493,  493,
      493,  235,  235,  235,  235,  235,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  236,  493,  493,  493,  236,  236,  236,  236,
      236,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      229,  493,  493,  493,  229,  229,  229,  229,  229,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  339,  493,

      493,  493,  339,  339,  339,  339,  339,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  238,  493,  493,  493,  238,  238,  238,
      238,  238,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  340,  493,  493,  493,  340,  340,  340,  340,  340,
      104,  493,  493,  493,  104,  104,  104,  104,  104,  440,
      440,  493,  440,  440,  440,  440,  440,  440,  438,  438,
      493,  438,  438,  438,  438,  438,  438,   20,  493,  493,

       20,   20,   20,   20,   20,   20,  455,  493,  493,  493,
      455,  455,  455,  455,  455,  450,  493,  493,  493,  450,
      450,  450,  450,  450,  456,  493,  493,  493,  456,  456,
      456,  456,  456,  485,  493,  493,  493,  485,  485,  485,
      485,  485,  458,  493,  493,  493,  458,  458,  458,  458,
      458,  466,  493,  493,  493,  466,  466,  466,  466,  466,
      491,  493,  493,  493,  491,  491,  491,  491,  491,  486,
      493,  493,  493,  486,  486,  486,  486,  486,  234,  493,
      493,  493,  234,  234,  234,  234,  234,    3,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493
    } ;

static const flex_int16_t yy_chk[10425] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    4,    8,   21,    8,
       27,    4,   21,    8,   11,    4,   22,   50,   21,    8,
      442,    4,    9,   11,  422,   22,   27,    9,   50,   21,
        8,    9,  132,    4,    7,    7,    7,    9,    7,    7,
       47,   11,   47,   22,    7,   47,   12,   47,    7,    9,
       97,   12,   97,   13,    7,   12,  132,   70,   13,   97,
       70,   12,   13,  363,   97,  354,    7,   10,   13,   10,

       15,  167,   10,   12,   10,   15,   70,   10,  342,   15,
       13,   10,   97,   20,  318,   15,   34,   10,   20,   23,
       34,  167,   20,  303,   23,  107,   34,   15,   20,   10,
       14,   14,   24,   28,   23,   14,   84,   24,   28,   14,
       20,   24,   28,  107,  107,   14,   23,   24,   28,   49,
       67,   38,   84,  292,   49,   38,   67,   14,   16,   24,
       28,   38,  240,   16,   49,   43,   51,   16,  169,   63,
       43,   51,   53,   16,   43,   63,   49,   53,   63,   67,
       43,   51,  238,   16,  169,   16,   17,   53,  233,   52,
       52,   17,   43,   51,   52,   17,   63,   56,   63,   53,

       54,   17,   56,  220,   52,   54,   17,   55,  212,   54,
      137,   55,   56,   17,   19,   54,   52,   55,  134,   19,
       19,  137,   72,   19,   56,   57,   72,   54,   55,   19,
       57,  202,   72,   77,   57,  197,  134,  134,  173,   92,
       57,   19,   77,   19,   26,   26,   26,   68,   26,   26,
      150,   68,   57,  142,   26,   92,   80,   68,   26,  158,
       77,   80,  133,  101,   26,  158,   92,  101,  113,   68,
       68,   80,  102,  101,  100,   95,   26,   29,   29,   29,
      103,   29,  104,   80,  103,  117,  104,   29,  158,  117,
      103,   29,  104,  123,   91,  117,  105,   29,   60,  280,

      105,   48,  123,  106,  104,  104,  105,  106,   29,   29,
       30,   30,   30,  106,   30,   30,  305,  108,  105,  105,
      123,  280,  280,   41,   30,  106,  106,  108,  109,   37,
       30,  125,  109,   25,  305,  305,  125,   18,  109,  108,
      108,    3,   30,   31,   31,   31,  125,   31,   31,    0,
      109,  109,  114,   31,    0,  201,    0,  114,  125,  201,
      111,  114,  112,   31,  111,  201,  112,  114,    0,  298,
      111,    0,  112,    0,    0,   31,   32,   32,   32,  114,
       32,   32,  111,  111,  112,  112,   32,  118,  129,  118,
       32,  298,  298,  129,  118,  135,   32,  129,    0,    0,

        0,  118,    0,  129,    0,  135,    0,  136,   32,   33,
       33,   33,  136,   33,   33,  129,  138,  135,  135,  118,
      168,  138,  136,  139,    0,  210,  168,  139,  223,   33,
       35,  138,   35,  139,  136,  145,    0,  223,  145,   35,
       35,  210,    0,  138,   35,  139,  139,  147,  147,  168,
       35,  235,  210,    0,  344,  223,  145,  147,  145,    0,
      235,    0,   35,   39,  151,   39,    0,  151,    0,  147,
       39,  147,  344,  344,   39,   39,    0,    0,  235,   39,
       39,   39,  152,  170,  151,  151,  170,  151,  152,  155,
        0,  152,   39,   39,   40,  155,   40,    0,  155,   40,

        0,   40,  170,    0,   40,  251,    0,  251,   40,  152,
        0,  152,  251,  181,   40,  196,  155,  181,  155,    0,
      196,  243,  224,  181,  196,  243,   40,   42,  205,   42,
      196,  243,  224,  205,   42,  181,  181,   42,  251,    0,
        0,   42,  196,  205,  224,  224,    0,   42,  221,  259,
        0,  259,  213,  221,  213,  205,  259,  221,   42,   42,
       44,  213,   44,  221,  222,   44,  213,   44,    0,  222,
        0,    0,  225,  222,   44,  221,    0,  225,  355,  222,
      355,  226,  259,  355,  213,  355,  226,  225,  377,    0,
      226,  222,   44,   45,  229,   45,  226,  228,   45,  225,

       45,  228,    0,   45,  229,    0,    0,  228,  226,  263,
      377,  377,  263,   45,  405,    0,  229,  229,    0,  228,
      228,    0,  236,  405,  256,   45,   46,  236,   46,  256,
      263,   46,  263,   46,  230,    0,   46,  236,  230,  256,
       46,  405,    0,    0,  230,  231,   46,    0,    0,  236,
      231,  256,  265,    0,  231,  265,  230,  230,   46,   58,
      231,  232,  234,    0,   58,    0,  232,  234,   58,    0,
      232,  234,  231,  265,   58,  265,  232,  234,   58,    0,
        0,  260,    0,    0,    0,  237,   58,   59,  232,  234,
      237,  260,   59,    0,  237,  247,   59,    0,  432,  247,

      237,    0,   59,  260,  260,  247,  308,  432,  336,  266,
      266,   59,  237,  336,   59,   61,  308,  247,  247,  266,
       61,   61,    0,  336,   61,  432,  269,  269,  308,  308,
       61,  266,    0,  266,    0,  336,  269,  270,  270,    0,
        0,    0,   61,    0,   61,   62,   62,  270,  269,   62,
      269,  361,    0,  361,    0,   62,  361,    0,  361,  270,
        0,  270,  273,  273,    0,    0,   62,   62,  276,   62,
       64,  276,  273,    0,    0,   64,   64,    0,    0,   64,
      283,    0,    0,  283,  273,   64,  273,    0,  329,  276,
      276,  276,  329,  284,    0,    0,  284,   64,  329,   64,

       65,  283,  283,  283,  337,   65,   65,    0,    0,  337,
      329,  329,    0,  284,  284,   65,  284,  322,  335,  337,
        0,    0,  322,    0,  365,  365,  322,   65,  335,   65,
       66,  337,  322,    0,  365,   66,   66,    0,  339,   66,
      335,  335,    0,  339,  322,   66,  365,  339,  365,  387,
        0,  340,    0,  339,    0,    0,  340,   66,  341,   66,
       71,   71,   71,  341,   71,  339,  340,  341,    0,    0,
       71,  387,  387,  341,   71,  388,  346,    0,  340,  350,
       71,  388,  394,  350,    0,  341,  346,    0,  394,  350,
        0,  357,   71,   73,   73,   73,  357,   73,  346,  346,

      357,  350,  350,    0,  388,    0,  357,   73,    0,  367,
      367,  394,    0,   73,    0,    0,    0,    0,  357,  367,
        0,    0,    0,    0,    0,   73,   74,   74,   74,    0,
       74,  367,    0,  367,  371,    0,   74,  371,    0,  372,
      369,  369,    0,  370,  370,  372,   74,    0,  372,  374,
      369,    0,  374,  370,  400,  371,  371,  371,   74,   75,
       75,   75,  369,   75,  369,  370,  372,  370,  372,   75,
      374,  374,  374,   75,  390,  412,  400,  400,    0,   75,
      390,    0,  453,  390,    0,  412,  395,    0,  453,  395,
      410,   75,   76,   76,   76,  410,   76,  412,  412,    0,

        0,  390,   76,  390,    0,  410,   76,  395,  395,  395,
      433,  453,   76,    0,  416,    0,  430,  410,    0,  416,
      433,  430,    0,  416,   76,   76,   78,   78,   78,  416,
       78,  430,  433,  433,    0,    0,    0,    0,    0,  436,
       78,  416,  445,  430,  436,  478,   78,  439,  445,  478,
        0,  445,  439,    0,  436,  478,  439,   78,   78,   79,
       79,   79,  439,   79,   79,    0,  436,  478,  478,  445,
        0,  445,    0,   79,  439,  444,  444,  446,  455,   79,
        0,    0,  458,  446,  455,  444,  446,  455,  458,  468,
        0,   79,   81,   81,   81,  468,   81,  444,    0,  444,

        0,    0,   81,    0,  446,  455,  446,  455,    0,    0,
        0,  458,   81,    0,    0,    0,  472,  479,  468,    0,
        0,  472,  479,   81,   81,   82,   82,   82,    0,   82,
       82,  472,  479,    0,    0,   82,    0,  490,    0,    0,
        0,    0,  490,  472,  479,   82,  490,    0,    0,    0,
        0,    0,  490,    0,    0,    0,    0,   82,   83,   83,
       83,    0,   83,   83,  490,    0,    0,    0,   83,    0,
        0,    0,   83,    0,    0,    0,    0,    0,   83,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       83,   85,   85,   85,    0,   85,   85,    0,    0,    0,

        0,   85,    0,    0,    0,   85,    0,    0,    0,    0,
        0,   85,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   85,   86,   86,   86,    0,   86,    0,
        0,    0,    0,    0,   86,    0,    0,    0,   86,    0,
        0,    0,    0,    0,   86,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   86,   86,   87,   87,   87,
        0,   87,   87,    0,    0,    0,    0,    0,    0,    0,
        0,   87,    0,    0,    0,    0,    0,   87,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   87,
       88,   88,   88,    0,   88,   88,    0,    0,    0,    0,

       88,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       88,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   88,   89,   89,   89,    0,   89,   89,    0,
        0,    0,    0,   89,    0,    0,    0,   89,    0,    0,
        0,    0,    0,   89,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   89,   90,   90,   90,    0,
       90,   90,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   90,   93,   93,   93,
        0,   93,   93,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   93,   94,    0,

       94,    0,    0,    0,    0,    0,    0,   94,   94,    0,
        0,    0,   94,    0,    0,    0,    0,    0,   94,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       94,   96,    0,   96,    0,    0,    0,    0,    0,    0,
       96,   96,    0,    0,    0,   96,    0,    0,    0,    0,
        0,   96,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   96,   98,    0,   98,    0,    0,    0,
        0,    0,    0,   98,   98,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   98,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   98,   99,    0,   99,

        0,    0,    0,    0,    0,    0,   99,   99,    0,    0,
        0,   99,    0,    0,    0,    0,    0,   99,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   99,
      110,    0,    0,    0,  110,    0,    0,  110,    0,    0,
      110,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  110,  110,  116,    0,  116,    0,    0,    0,
        0,  116,    0,    0,  116,    0,    0,    0,  116,    0,
        0,    0,    0,    0,  116,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  116,  119,    0,  119,
        0,    0,    0,    0,  119,    0,    0,  119,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  119,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  119,
      120,    0,  120,    0,    0,    0,    0,  120,    0,    0,
      120,    0,    0,    0,  120,    0,    0,    0,    0,    0,
      120,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  120,  121,    0,  121,    0,    0,    0,    0,
      121,    0,    0,  121,    0,    0,    0,  121,    0,    0,
        0,    0,    0,  121,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  121,  121,  122,    0,  122,
        0,    0,    0,    0,  122,    0,    0,    0,    0,    0,

        0,  122,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  122,  122,
      124,    0,  124,    0,    0,    0,    0,  124,    0,    0,
      124,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      124,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  124,  124,  126,    0,  126,    0,    0,  126,    0,
      126,    0,    0,  126,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  126,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  126,  127,    0,  127,    0,
        0,  127,    0,  127,    0,    0,  127,    0,    0,    0,

      127,    0,    0,    0,    0,    0,  127,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  127,  128,
        0,  128,    0,    0,    0,    0,  128,    0,    0,  128,
        0,    0,    0,  128,    0,    0,    0,    0,    0,  128,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      128,  128,  130,    0,  130,    0,    0,  130,    0,  130,
        0,    0,  130,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  130,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  130,  131,    0,  131,    0,    0,
      131,    0,  131,    0,    0,  131,    0,    0,    0,  131,

        0,    0,    0,    0,    0,  131,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  131,  140,    0,
        0,    0,    0,  140,    0,    0,    0,  140,    0,    0,
        0,    0,    0,  140,    0,    0,    0,    0,    0,    0,
        0,  140,    0,    0,    0,  140,  141,    0,    0,    0,
        0,  141,    0,    0,    0,  141,    0,    0,    0,    0,
        0,  141,    0,    0,    0,    0,    0,  141,    0,    0,
        0,    0,    0,  141,  143,    0,    0,    0,    0,  143,
      143,    0,    0,  143,    0,    0,    0,    0,    0,  143,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  143,    0,  143,  144,  144,    0,    0,  144,    0,
        0,    0,    0,    0,  144,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  144,    0,  144,  146,
      146,    0,    0,  146,    0,    0,    0,    0,    0,  146,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  146,    0,  146,  148,  148,    0,    0,  148,    0,
        0,    0,    0,    0,  148,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  148,    0,  148,  149,
      149,    0,    0,  149,    0,    0,    0,    0,    0,  149,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  149,  149,  149,  153,    0,    0,    0,    0,  153,
      153,    0,    0,  153,    0,    0,    0,    0,    0,  153,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  153,    0,  153,  154,  154,    0,    0,  154,    0,
        0,    0,    0,    0,  154,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  154,  154,    0,  154,  156,
        0,    0,    0,    0,  156,  156,    0,    0,    0,    0,
        0,    0,    0,    0,  156,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  156,    0,  156,  157,
        0,    0,    0,    0,  157,  157,    0,    0,  157,    0,

        0,    0,    0,    0,  157,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  157,    0,  157,  159,
      159,    0,    0,    0,    0,    0,    0,    0,    0,  159,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      159,  159,    0,  159,  160,    0,    0,    0,    0,  160,
      160,    0,    0,    0,    0,    0,    0,    0,    0,  160,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  160,    0,  160,  161,    0,    0,    0,    0,  161,
      161,    0,    0,    0,    0,    0,    0,    0,    0,  161,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  161,    0,  161,  162,    0,    0,    0,    0,  162,
      162,    0,    0,  162,    0,    0,    0,    0,    0,  162,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  162,    0,  162,  163,  163,    0,    0,  163,    0,
        0,    0,    0,    0,  163,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  163,  163,    0,  163,  164,
        0,    0,    0,    0,  164,  164,    0,    0,  164,    0,
        0,    0,    0,    0,  164,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  164,    0,  164,  165,
        0,    0,    0,    0,  165,  165,    0,    0,    0,    0,

        0,    0,    0,    0,  165,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  165,    0,  165,  166,
        0,    0,    0,    0,  166,  166,    0,    0,  166,    0,
        0,    0,    0,    0,  166,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  166,    0,  166,  172,
      172,  172,    0,  172,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  172,    0,    0,    0,    0,    0,  172,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  172,  174,  174,  174,    0,  174,    0,    0,    0,
        0,    0,  174,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  174,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  174,  175,  175,  175,    0,  175,
        0,    0,    0,    0,    0,  175,    0,    0,    0,  175,
        0,    0,    0,    0,    0,  175,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  175,  176,  176,
      176,    0,  176,    0,    0,    0,    0,    0,  176,    0,
        0,    0,  176,    0,    0,    0,    0,    0,  176,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      176,  177,  177,  177,    0,  177,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  177,    0,    0,    0,    0,

        0,  177,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  177,  178,  178,  178,    0,  178,    0,
        0,    0,    0,    0,  178,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  178,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  178,  179,  179,  179,
        0,  179,    0,    0,    0,    0,    0,  179,    0,    0,
        0,  179,    0,    0,    0,    0,    0,  179,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  179,
      180,  180,  180,    0,  180,    0,    0,    0,    0,    0,
      180,    0,    0,    0,  180,    0,    0,    0,    0,    0,

      180,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  180,  180,  182,  182,  182,    0,  182,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  182,    0,
        0,    0,    0,    0,  182,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  182,  182,  183,  183,
      183,    0,  183,    0,    0,    0,    0,    0,  183,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  183,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      183,  183,  184,  184,  184,    0,  184,    0,    0,    0,
        0,    0,  184,    0,    0,    0,  184,    0,    0,    0,

        0,    0,  184,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  184,  184,  185,  185,  185,    0,
      185,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  185,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  185,
      186,  186,  186,    0,  186,  186,    0,    0,    0,    0,
      186,    0,    0,    0,  186,    0,    0,    0,    0,    0,
      186,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  186,  187,  187,  187,    0,  187,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  187,    0,    0,

        0,    0,    0,  187,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  187,  187,  188,  188,  188,
        0,  188,  188,    0,    0,    0,    0,    0,    0,    0,
        0,  188,    0,    0,    0,    0,    0,  188,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  188,
      189,  189,  189,    0,  189,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  189,    0,    0,    0,    0,    0,
      189,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  189,  189,  190,  190,  190,    0,  190,  190,    0,
        0,    0,    0,    0,    0,    0,    0,  190,    0,    0,

        0,    0,    0,  190,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  190,  191,  191,  191,    0,
      191,    0,    0,    0,    0,    0,  191,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  191,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  191,  191,
      192,  192,  192,    0,  192,  192,    0,    0,    0,    0,
      192,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      192,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  192,  193,  193,  193,    0,  193,    0,    0,
        0,    0,    0,  193,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  193,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  193,  193,  194,  194,  194,    0,
      194,  194,    0,    0,    0,    0,  194,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  194,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  194,  195,
      195,  195,    0,  195,  195,    0,    0,    0,    0,  195,
        0,    0,    0,  195,    0,    0,    0,    0,    0,  195,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  195,  198,  198,  198,    0,  198,  198,    0,    0,
        0,    0,  198,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  198,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  198,  199,  199,  199,    0,  199,
      199,    0,    0,    0,    0,  199,    0,    0,    0,  199,
        0,    0,    0,    0,    0,  199,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  199,  203,  203,
      203,    0,  203,    0,    0,    0,    0,    0,  203,    0,
        0,    0,  203,    0,    0,    0,    0,    0,  203,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      203,  204,  204,  204,    0,  204,    0,    0,    0,    0,
        0,  204,    0,    0,    0,  204,    0,    0,    0,    0,

        0,  204,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  204,  204,  207,  207,  207,    0,  207,
      207,    0,    0,    0,    0,  207,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  207,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  207,  208,  208,
      208,    0,  208,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  208,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  208,  209,  209,  209,    0,  209,  209,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  209,  211,  211,  211,    0,  211,  211,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  211,  214,    0,  214,    0,    0,    0,
        0,    0,    0,  214,  214,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  214,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  214,  215,    0,  215,
        0,    0,    0,    0,    0,    0,  215,  215,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  215,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  215,
      216,    0,  216,    0,    0,    0,    0,    0,    0,  216,

      216,    0,    0,    0,  216,    0,    0,    0,    0,    0,
      216,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  216,  217,    0,  217,    0,    0,    0,    0,
        0,    0,  217,  217,    0,    0,    0,  217,    0,    0,
        0,    0,    0,  217,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  217,  218,    0,  218,    0,
        0,    0,    0,    0,    0,  218,  218,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  218,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  218,  227,
        0,    0,    0,  227,    0,  227,    0,    0,    0,  227,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  227,  227,  241,    0,  241,    0,    0,    0,    0,
      241,    0,    0,  241,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  241,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  241,  242,    0,  242,    0,
        0,    0,    0,  242,    0,    0,  242,    0,    0,    0,
      242,    0,    0,    0,    0,    0,  242,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  242,  244,
        0,  244,    0,    0,    0,    0,  244,    0,    0,  244,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  244,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  244,  245,    0,  245,    0,    0,    0,    0,  245,
        0,    0,  245,    0,    0,    0,  245,    0,    0,    0,
        0,    0,  245,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  245,  246,    0,  246,    0,    0,
        0,    0,  246,    0,    0,  246,    0,    0,    0,  246,
        0,    0,    0,    0,    0,  246,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  246,  246,  248,
        0,  248,    0,    0,    0,    0,  248,    0,    0,    0,
        0,    0,    0,  248,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  248,  248,  249,    0,  249,    0,    0,    0,    0,
      249,    0,    0,  249,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  249,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  249,  249,  250,    0,  250,
        0,    0,    0,    0,  250,    0,    0,  250,    0,    0,
        0,  250,    0,    0,    0,    0,    0,  250,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  250,
      250,  252,    0,  252,    0,    0,  252,    0,  252,    0,
        0,  252,    0,    0,    0,  252,    0,    0,    0,    0,

        0,  252,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  252,  253,    0,  253,    0,    0,    0,
        0,  253,    0,    0,    0,    0,    0,    0,  253,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  253,  253,  254,    0,
      254,    0,    0,    0,    0,  254,    0,    0,  254,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  254,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      254,  254,  255,    0,  255,    0,    0,    0,    0,  255,
        0,    0,  255,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  255,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  255,  255,  257,    0,  257,    0,    0,
      257,    0,  257,    0,    0,  257,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  257,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  257,  258,    0,
      258,    0,    0,    0,    0,  258,    0,    0,  258,    0,
        0,    0,  258,    0,    0,    0,    0,    0,  258,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      258,  258,  261,    0,    0,  261,    0,    0,    0,    0,
      261,    0,    0,    0,  261,    0,    0,    0,    0,    0,

      261,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  261,  262,    0,    0,  262,    0,    0,    0,
        0,  262,    0,    0,    0,  262,    0,    0,    0,    0,
        0,  262,    0,  262,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  262,  264,  264,    0,    0,  264,    0,
        0,    0,    0,    0,  264,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  264,    0,  264,  267,
      267,    0,    0,  267,    0,    0,    0,    0,    0,  267,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  267,    0,  267,  271,  271,    0,    0,  271,    0,

        0,    0,    0,    0,  271,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  271,    0,  271,  272,
      272,    0,    0,  272,    0,    0,    0,    0,    0,  272,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  272,    0,  272,  274,  274,    0,    0,  274,    0,
        0,    0,    0,    0,  274,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  274,    0,  274,  275,
      275,    0,    0,  275,    0,    0,    0,    0,    0,  275,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  275,  275,  275,  277,  277,    0,    0,  277,    0,

        0,    0,    0,    0,  277,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  277,  277,  277,  278,
      278,    0,    0,    0,    0,    0,    0,    0,    0,  278,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  278,  278,  278,  279,  279,    0,    0,  279,    0,
        0,    0,    0,    0,  279,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  279,  279,  279,  281,
        0,    0,    0,    0,  281,  281,    0,    0,  281,    0,
        0,    0,    0,    0,  281,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  281,    0,  281,  285,

      285,    0,    0,  285,    0,    0,    0,    0,    0,  285,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  285,  285,  285,  286,  286,    0,    0,    0,    0,
        0,    0,    0,    0,  286,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  286,  286,    0,  286,  287,
        0,    0,    0,    0,  287,  287,    0,    0,    0,    0,
        0,    0,    0,    0,  287,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  287,    0,  287,  288,
        0,    0,    0,    0,  288,  288,    0,    0,  288,    0,
        0,    0,    0,    0,  288,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  288,    0,  288,  289,
      289,    0,    0,  289,    0,    0,    0,    0,    0,  289,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      289,  289,    0,  289,  290,    0,    0,    0,    0,  290,
      290,    0,    0,    0,    0,    0,    0,    0,    0,  290,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  290,    0,  290,  291,    0,    0,    0,    0,  291,
      291,    0,    0,  291,    0,    0,    0,    0,    0,  291,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  291,    0,  291,  293,  293,    0,    0,    0,    0,

        0,    0,    0,    0,  293,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  293,  293,  293,  294,
      294,    0,    0,    0,    0,    0,    0,    0,    0,  294,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      294,  294,    0,  294,  295,    0,    0,    0,    0,  295,
      295,    0,    0,    0,    0,    0,    0,    0,    0,  295,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  295,    0,  295,  296,    0,    0,    0,    0,  296,
      296,    0,    0,    0,    0,    0,    0,    0,    0,  296,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  296,    0,  296,  297,  297,    0,    0,  297,    0,
        0,    0,    0,    0,  297,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  297,  297,  297,  299,
      299,  299,    0,  299,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  299,    0,    0,    0,    0,    0,  299,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  299,  300,  300,  300,    0,  300,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  300,    0,    0,    0,
        0,    0,  300,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  300,  301,  301,  301,    0,  301,

        0,    0,    0,    0,    0,  301,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  301,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  301,  302,  302,
      302,    0,  302,    0,    0,    0,    0,    0,  302,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  302,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      302,  304,  304,  304,    0,  304,    0,    0,    0,    0,
        0,  304,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  304,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  304,  306,  306,  306,    0,  306,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  306,    0,
        0,    0,    0,    0,  306,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  306,  306,  307,  307,
      307,    0,  307,  307,    0,    0,    0,    0,    0,    0,
        0,    0,  307,    0,    0,    0,    0,    0,  307,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      307,  309,  309,  309,    0,  309,    0,    0,    0,    0,
        0,  309,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  309,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  309,  309,  310,  310,  310,    0,  310,

      310,    0,    0,    0,    0,  310,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  310,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  310,  311,  311,
      311,    0,  311,    0,    0,    0,    0,    0,  311,    0,
        0,    0,  311,    0,    0,    0,    0,    0,  311,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      311,  311,  312,  312,  312,    0,  312,    0,    0,    0,
        0,    0,  312,    0,    0,    0,  312,    0,    0,    0,
        0,    0,  312,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  312,  312,  313,  313,  313,    0,

      313,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      313,    0,    0,    0,    0,    0,  313,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  313,  313,
      314,  314,  314,    0,  314,    0,    0,    0,    0,    0,
      314,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      314,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  314,  314,  315,  315,  315,    0,  315,    0,
        0,    0,    0,    0,  315,    0,    0,    0,  315,    0,
        0,    0,    0,    0,  315,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  315,  315,  316,  316,

      316,    0,  316,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  316,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  316,  317,  317,  317,    0,  317,  317,    0,    0,
        0,    0,  317,    0,    0,    0,  317,    0,    0,    0,
        0,    0,  317,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  317,  319,  319,  319,    0,  319,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  319,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  319,  320,

      320,  320,    0,  320,  320,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  320,
      321,  321,  321,    0,  321,  321,    0,    0,    0,    0,
      321,    0,    0,    0,  321,    0,    0,    0,    0,    0,
      321,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  321,  323,  323,  323,    0,  323,  323,    0,
        0,    0,    0,    0,    0,    0,    0,  323,    0,    0,
        0,    0,    0,  323,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  323,  324,  324,  324,    0,
      324,  324,    0,    0,    0,    0,  324,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  324,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  324,  325,
      325,  325,    0,  325,  325,    0,    0,    0,    0,  325,
        0,    0,    0,  325,    0,    0,    0,    0,    0,  325,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  325,  326,  326,  326,    0,  326,  326,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  326,  327,  327,  327,    0,  327,    0,    0,
        0,    0,    0,  327,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  327,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  327,  327,  331,  331,  331,
        0,  331,    0,    0,    0,    0,    0,  331,    0,    0,
        0,  331,    0,    0,    0,    0,    0,  331,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  331,
      331,  332,  332,  332,    0,  332,  332,    0,    0,    0,
        0,  332,    0,    0,    0,  332,    0,    0,    0,    0,
        0,  332,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  332,  333,    0,  333,    0,    0,    0,
        0,    0,    0,  333,  333,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  333,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  333,  334,    0,  334,
        0,    0,    0,    0,    0,    0,  334,  334,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  334,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  334,
      338,    0,    0,    0,  338,    0,    0,    0,  338,    0,
      338,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  338,  338,  343,    0,  343,    0,    0,    0,
        0,  343,    0,    0,  343,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  343,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  343,  345,    0,  345,

        0,    0,  345,    0,  345,    0,    0,    0,    0,    0,
        0,  345,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  345,
      347,    0,  347,    0,    0,    0,    0,  347,    0,    0,
      347,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      347,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  347,  347,  348,    0,  348,    0,    0,  348,
        0,  348,    0,    0,  348,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  348,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  348,  349,    0,  349,

        0,    0,    0,    0,  349,    0,    0,  349,    0,    0,
        0,  349,    0,    0,    0,    0,    0,  349,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  349,
      349,  351,    0,  351,    0,    0,    0,    0,  351,    0,
        0,  351,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  351,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  351,  351,  352,    0,  352,    0,    0,
        0,    0,  352,    0,    0,  352,    0,    0,    0,  352,
        0,    0,    0,    0,    0,  352,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  352,  352,  353,

        0,  353,    0,    0,  353,    0,  353,    0,    0,  353,
        0,    0,    0,  353,    0,    0,    0,    0,    0,  353,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  353,  356,    0,  356,    0,    0,  356,    0,  356,
        0,    0,  356,    0,    0,    0,  356,    0,    0,    0,
        0,    0,  356,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  356,  358,    0,  358,    0,    0,
      358,    0,  358,    0,    0,    0,    0,    0,    0,  358,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  358,  359,    0,

      359,    0,    0,  359,    0,  359,    0,    0,  359,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  359,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      359,  360,    0,  360,    0,    0,  360,    0,  360,    0,
        0,  360,    0,    0,    0,  360,    0,    0,    0,    0,
        0,  360,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  360,  364,    0,    0,    0,    0,  364,
        0,    0,    0,  364,    0,    0,    0,    0,    0,  364,
        0,    0,  364,    0,    0,    0,    0,    0,    0,    0,
        0,  364,  366,  366,    0,    0,  366,    0,    0,    0,

        0,    0,  366,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  366,    0,  366,  368,  368,    0,
        0,  368,    0,    0,    0,    0,    0,  368,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  368,
        0,  368,  373,  373,    0,    0,  373,    0,    0,    0,
        0,    0,  373,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  373,  373,  373,  375,  375,    0,
        0,    0,    0,    0,    0,    0,    0,  375,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  375,
      375,  375,  376,  376,    0,    0,  376,    0,    0,    0,

        0,    0,  376,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  376,  376,  376,  378,    0,    0,
        0,    0,  378,  378,    0,    0,  378,    0,    0,    0,
        0,    0,  378,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  378,    0,  378,  379,  379,    0,
        0,    0,    0,    0,    0,    0,    0,  379,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  379,
      379,  379,  380,  380,    0,    0,    0,    0,    0,    0,
        0,    0,  380,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  380,  380,  380,  381,    0,    0,

        0,    0,  381,  381,    0,    0,    0,    0,    0,    0,
        0,    0,  381,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  381,    0,  381,  382,  382,    0,
        0,  382,    0,    0,    0,    0,    0,  382,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  382,
      382,  382,  383,  383,    0,    0,  383,    0,    0,    0,
        0,    0,  383,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  383,  383,  383,  384,  384,    0,
        0,    0,    0,    0,    0,    0,    0,  384,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  384,

      384,  384,  385,  385,    0,    0,  385,    0,    0,    0,
        0,    0,  385,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  385,  385,  385,  386,    0,    0,
        0,    0,  386,  386,    0,    0,  386,    0,    0,    0,
        0,    0,  386,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  386,    0,  386,  389,    0,    0,
        0,    0,  389,  389,    0,    0,  389,    0,    0,    0,
        0,    0,  389,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  389,    0,  389,  391,    0,    0,
        0,    0,  391,  391,    0,    0,  391,    0,    0,    0,

        0,    0,  391,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  391,    0,  391,  392,    0,    0,
        0,    0,  392,  392,    0,    0,    0,    0,    0,    0,
        0,    0,  392,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  392,    0,  392,  393,    0,    0,
        0,    0,  393,  393,    0,    0,  393,    0,    0,    0,
        0,    0,  393,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  393,    0,  393,  396,  396,    0,
        0,    0,    0,    0,    0,    0,    0,  396,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  396,

      396,  396,  397,  397,    0,    0,    0,    0,    0,    0,
        0,    0,  397,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  397,  397,    0,  397,  398,    0,    0,
        0,    0,  398,  398,    0,    0,    0,    0,    0,    0,
        0,    0,  398,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  398,    0,  398,  401,  401,    0,
        0,    0,    0,    0,    0,    0,    0,  401,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  401,
      401,  401,  402,  402,  402,    0,  402,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  402,    0,    0,    0,

        0,    0,  402,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  402,  402,  403,  403,  403,    0,
      403,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      403,    0,    0,    0,    0,    0,  403,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  403,  403,
      404,  404,  404,    0,  404,  404,    0,    0,    0,    0,
        0,    0,    0,    0,  404,    0,    0,    0,    0,    0,
      404,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  404,  406,  406,  406,    0,  406,  406,    0,
        0,    0,    0,    0,    0,    0,    0,  406,    0,    0,

        0,    0,    0,  406,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  406,  407,  407,  407,    0,
      407,    0,    0,    0,    0,    0,  407,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  407,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  407,  407,
      408,  408,  408,    0,  408,    0,    0,    0,    0,    0,
      408,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      408,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  408,  408,  409,  409,  409,    0,  409,  409,
        0,    0,    0,    0,  409,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  409,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  409,  411,  411,  411,
        0,  411,  411,    0,    0,    0,    0,  411,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  411,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  411,
      413,  413,  413,    0,  413,    0,    0,    0,    0,    0,
      413,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      413,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  413,  413,  414,  414,  414,    0,  414,  414,
        0,    0,    0,    0,  414,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  414,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  414,  415,  415,  415,
        0,  415,  415,    0,    0,    0,    0,  415,    0,    0,
        0,  415,    0,    0,    0,    0,    0,  415,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  415,
      418,  418,  418,    0,  418,  418,    0,    0,    0,    0,
      418,    0,    0,    0,  418,    0,    0,    0,    0,    0,
      418,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  418,  419,  419,  419,    0,  419,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  419,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  419,  420,  420,  420,
        0,  420,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  420,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      420,  421,  421,  421,    0,  421,  421,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  421,  423,  423,  423,    0,  423,  423,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  423,  424,  424,  424,    0,  424,  424,    0,

        0,    0,    0,  424,    0,    0,    0,  424,    0,    0,
        0,    0,    0,  424,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  424,  426,  426,  426,    0,
      426,  426,    0,    0,    0,    0,    0,    0,    0,    0,
      426,    0,    0,    0,    0,    0,  426,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  426,  428,
      428,  428,    0,  428,  428,    0,    0,    0,    0,  428,
        0,    0,    0,  428,    0,    0,    0,    0,    0,  428,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  428,  429,  429,  429,    0,  429,  429,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  429,  431,    0,    0,    0,  431,    0,    0,
        0,  431,    0,  431,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  431,  431,  435,    0,  435,
        0,    0,  435,    0,  435,    0,    0,  435,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  435,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  435,
      437,    0,  437,    0,    0,  437,    0,  437,    0,    0,
      437,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      437,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  437,  438,    0,  438,    0,    0,  438,    0,
      438,    0,    0,  438,    0,    0,    0,  438,    0,    0,
        0,    0,    0,  438,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  438,  441,    0,  441,    0,
        0,  441,    0,  441,    0,    0,  441,    0,    0,    0,
      441,    0,    0,    0,    0,    0,  441,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  441,  443,
        0,    0,  443,    0,    0,    0,    0,  443,    0,    0,
        0,  443,    0,    0,    0,    0,    0,  443,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  443,

      447,  447,    0,    0,    0,    0,    0,    0,    0,    0,
      447,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  447,  447,  447,  448,    0,    0,    0,    0,
      448,  448,    0,    0,    0,    0,    0,    0,    0,    0,
      448,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  448,    0,  448,  450,  450,    0,    0,    0,
        0,    0,    0,    0,    0,  450,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  450,  450,  450,
      452,    0,    0,    0,    0,  452,  452,    0,    0,  452,
        0,    0,    0,    0,    0,  452,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  452,    0,  452,
      454,    0,    0,    0,    0,  454,  454,    0,    0,  454,
        0,    0,    0,    0,    0,  454,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  454,    0,  454,
      456,    0,    0,    0,    0,  456,  456,    0,    0,    0,
        0,    0,    0,    0,    0,  456,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  456,    0,  456,
      457,    0,    0,    0,    0,  457,  457,    0,    0,  457,
        0,    0,    0,    0,    0,  457,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  457,    0,  457,

      459,  459,    0,    0,    0,    0,    0,    0,    0,    0,
      459,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  459,  459,  459,  460,  460,    0,    0,    0,
        0,    0,    0,    0,    0,  460,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  460,  460,  460,
      461,    0,    0,    0,    0,  461,  461,    0,    0,    0,
        0,    0,    0,    0,    0,  461,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  461,    0,  461,
      462,    0,    0,    0,    0,  462,  462,    0,    0,    0,
        0,    0,    0,    0,    0,  462,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  462,    0,  462,
      463,    0,    0,    0,    0,  463,  463,    0,    0,    0,
        0,    0,    0,    0,    0,  463,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  463,    0,  463,
      464,    0,    0,    0,    0,  464,  464,    0,    0,  464,
        0,    0,    0,    0,    0,  464,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  464,    0,  464,
      466,    0,    0,    0,    0,  466,  466,    0,    0,    0,
        0,    0,    0,    0,    0,  466,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  466,    0,  466,

      469,  469,    0,    0,    0,    0,    0,    0,    0,    0,
      469,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  469,  469,  469,  471,  471,  471,    0,  471,
      471,    0,    0,    0,    0,    0,    0,    0,    0,  471,
        0,    0,    0,    0,    0,  471,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  471,  473,  473,
      473,    0,  473,  473,    0,    0,    0,    0,  473,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  473,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      473,  476,  476,  476,    0,  476,  476,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  476,  477,  477,  477,    0,  477,  477,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  477,  482,  482,    0,    0,    0,    0,    0,
        0,    0,    0,  482,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  482,  482,  482,  483,    0,
        0,    0,    0,  483,  483,    0,    0,    0,    0,    0,
        0,    0,    0,  483,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  483,    0,  483,  484,    0,
        0,    0,    0,  484,  484,    0,    0,    0,    0,    0,

        0,    0,    0,  484,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  484,    0,  484,  486,    0,
        0,    0,    0,  486,  486,    0,    0,    0,    0,    0,
        0,    0,    0,  486,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  486,    0,  486,  488,    0,
        0,    0,    0,  488,  488,    0,    0,    0,    0,    0,
        0,    0,    0,  488,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  488,    0,  488,  489,    0,
        0,    0,    0,  489,  489,    0,    0,    0,    0,    0,
        0,    0,    0,  489,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  489,    0,  489,  492,    0,
        0,    0,    0,  492,  492,    0,    0,    0,    0,    0,
        0,    0,    0,  492,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  492,    0,  492,  494,    0,
        0,    0,  494,  494,  494,  494,  494,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  496,    0,    0,    0,
      496,  496,  496,    0,  496,  497,  497,    0,  497,  497,
      497,  497,  497,  497,  498,    0,    0,    0,  498,  498,
      498,  498,  498,  499,    0,    0,    0,  499,  499,  499,
      499,  499,  500,    0,    0,    0,  500,  500,  500,  500,

      500,  501,    0,    0,    0,  501,  501,  501,  501,  501,
      502,    0,    0,    0,  502,  502,  502,  502,  502,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  509,  509,    0,  509,  509,  509,  509,
      509,  509,  510,    0,    0,    0,  510,  510,    0,    0,
      510,  511,    0,    0,    0,    0,  511,  511,    0,  511,

      512,    0,    0,    0,  512,  512,  512,    0,  512,  513,
        0,    0,    0,  513,  513,  513,  513,  513,  514,  514,
        0,  514,  514,  514,  514,  514,  514,  515,  515,    0,
      515,  515,  515,  515,  515,  515,  516,  516,    0,  516,
      516,  516,  516,  516,  516,  517,  517,    0,  517,  517,
      517,  517,  517,  517,  518,  518,    0,  518,  518,  518,
      518,  518,  518,  519,  519,    0,  519,  519,  519,  519,
      519,  519,  520,    0,    0,    0,  520,  520,  520,  520,
      520,  521,    0,    0,    0,  521,  521,  521,  521,  521,
      522,    0,    0,    0,  522,  522,  522,  522,  522,  523,

        0,    0,    0,  523,  523,  523,  523,  523,  524,    0,
        0,    0,  524,  524,  524,  524,  524,  525,    0,    0,
        0,  525,  525,  525,  525,  525,  526,    0,    0,    0,
      526,  526,  526,  526,  526,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  534,  534,

      534,  534,  534,  534,  534,  534,  534,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  537,    0,    0,    0,  537,
      537,  537,  537,  537,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  539,  539,    0,  539,  539,  539,  539,
      539,  539,  540,  540,    0,  540,  540,  540,  540,  540,
      540,  541,  541,    0,  541,  541,  541,  541,  541,  541,
      542,  542,    0,  542,  542,  542,  542,  542,  542,  543,
      543,    0,  543,  543,  543,  543,  543,  543,  544,    0,
        0,    0,    0,  544,  544,    0,  544,  545,    0,    0,

        0,  545,  545,  545,  545,  545,  546,    0,    0,    0,
      546,  546,  546,  546,  546,  547,    0,    0,    0,  547,
      547,  547,  547,  547,  548,    0,    0,    0,  548,  548,
      548,  548,  548,  549,    0,    0,    0,  549,  549,  549,
      549,  549,  550,  550,    0,  550,  550,  550,  550,  550,
      550,  551,  551,    0,  551,  551,  551,  551,  551,  551,
      552,  552,    0,  552,  552,  552,  552,  552,  552,  553,
      553,    0,  553,  553,  553,  553,  553,  553,  554,  554,
        0,  554,  554,  554,  554,  554,  554,  555,  555,    0,
      555,  555,  555,  555,  555,  555,  556,  556,    0,  556,

      556,  556,  556,  556,  556,  557,    0,    0,    0,  557,
      557,  557,  557,  557,  558,  558,    0,  558,  558,  558,
      558,  558,  558,  559,    0,    0,    0,  559,  559,  559,
      559,  559,  560,    0,    0,    0,  560,  560,  560,  560,
      560,  561,    0,    0,    0,  561,  561,  561,  561,  561,
      562,    0,    0,    0,  562,  562,  562,  562,  562,  563,
        0,    0,    0,  563,  563,  563,  563,  563,  564,    0,
        0,    0,  564,  564,  564,  564,  564,  565,    0,    0,
        0,  565,  565,  565,  565,  565,  566,    0,    0,    0,
      566,  566,  566,  566,  566,  567,    0,    0,    0,  567,

      567,  567,  567,  567,  568,    0,    0,    0,  568,  568,
      568,  568,  569,    0,    0,    0,  569,  569,  569,  569,
      569,  570,    0,    0,    0,  570,  570,  570,  570,  570,
      571,    0,    0,    0,  571,  571,  571,  571,  571,  572,
        0,    0,    0,  572,  572,  572,  572,  572,  573,    0,
        0,    0,  573,  573,  573,  573,  573,  574,    0,    0,
        0,  574,  574,  574,  574,  574,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  577,    0,    0,    0,  577,  577,
        0,    0,  577,  578,  578,  578,  578,  578,  578,  578,

      578,  578,  579,    0,    0,    0,    0,  579,  579,    0,
      579,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  586,    0,    0,    0,  586,
      586,  586,  586,  586,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  589,  589,  589,  589,  589,  589,  589,  589,

      589,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  597,    0,    0,    0,  597,  597,
      597,  597,  597,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  599,    0,    0,    0,  599,  599,  599,    0,
      599,  600,  600,  600,  600,  600,  600,  600,  600,  600,

      601,    0,    0,    0,  601,  601,  601,  601,  601,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  604,  604,    0,
      604,  604,  604,  604,  604,  604,  605,  605,    0,  605,
      605,  605,  605,  605,  605,  606,  606,    0,  606,  606,
      606,  606,  606,  606,  607,  607,    0,  607,  607,  607,
      607,  607,  607,  608,  608,    0,  608,  608,  608,  608,
      608,  608,  609,    0,    0,    0,    0,  609,  609,    0,
      609,  610,    0,    0,    0,  610,  610,  610,  610,  610,
      611,    0,    0,    0,  611,  611,  611,  611,  611,  612,

        0,    0,    0,  612,  612,  612,  612,  612,  613,    0,
        0,    0,  613,  613,  613,  613,  613,  614,    0,    0,
        0,  614,  614,  614,  614,  614,  615,    0,    0,    0,
      615,  615,  615,  615,  615,  616,    0,    0,    0,  616,
      616,  616,  616,  616,  617,    0,    0,    0,  617,  617,
        0,    0,  617,  618,  618,    0,  618,  618,  618,  618,
      618,  618,  619,  619,    0,  619,  619,  619,  619,  619,
      619,  620,  620,    0,  620,  620,  620,  620,  620,  620,
      621,  621,    0,  621,  621,  621,  621,  621,  621,  622,
      622,    0,  622,  622,  622,  622,  622,  622,  623,  623,

        0,  623,  623,  623,  623,  623,  623,  624,  624,    0,
      624,  624,  624,  624,  624,  624,  625,  625,    0,  625,
      625,  625,  625,  625,  625,  626,  626,    0,  626,  626,
      626,  626,  626,  626,  627,    0,    0,  627,  627,  627,
      627,  627,  627,  628,    0,    0,    0,  628,  628,  628,
      628,  628,  629,    0,    0,    0,  629,  629,  629,  629,
      629,  630,    0,    0,    0,  630,  630,  630,  630,  630,
      631,    0,    0,    0,  631,  631,  631,  631,  631,  632,
        0,    0,    0,  632,    0,  632,  632,  633,    0,    0,
        0,  633,  633,  633,  633,  633,  634,    0,    0,    0,

      634,  634,  634,  634,  634,  635,    0,    0,    0,  635,
      635,  635,  635,  635,  636,    0,    0,    0,  636,  636,
      636,  636,  636,  637,    0,    0,    0,  637,  637,  637,
      637,  637,  638,    0,    0,    0,  638,  638,  638,  638,
      638,  639,    0,    0,    0,  639,  639,  639,  639,  639,
      640,    0,    0,    0,  640,  640,  640,  640,  640,  641,
        0,    0,    0,  641,  641,  641,  641,  641,  642,    0,
        0,    0,  642,  642,  642,  642,  642,  643,    0,    0,
        0,  643,  643,  643,  643,  643,  644,    0,    0,    0,
      644,  644,  644,  644,  644,  645,  645,  645,  645,  645,

      645,  645,  645,  645,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  649,    0,    0,    0,    0,  649,  649,    0,  649,
      650,    0,    0,    0,  650,  650,  650,  650,  650,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  653,    0,    0,
        0,  653,  653,  653,  653,  653,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  656,  656,  656,  656,  656,  656,

      656,  656,  656,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  662,    0,
        0,    0,  662,  662,  662,  662,  662,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  666,    0,    0,    0,  666,  666,
      666,  666,  666,  667,  667,  667,  667,  667,  667,  667,

      667,  667,  668,    0,    0,    0,  668,  668,  668,  668,
      668,  669,  669,    0,  669,  669,  669,  669,  669,  669,
      670,    0,    0,    0,  670,  670,  670,  670,  670,  671,
        0,    0,    0,  671,  671,  671,  671,  671,  672,    0,
        0,    0,  672,  672,  672,  672,  672,  673,    0,    0,
        0,  673,  673,  673,  673,  673,  674,  674,    0,  674,
      674,  674,  674,  674,  674,  675,  675,    0,  675,  675,
      675,  675,  675,  675,  676,  676,    0,  676,  676,  676,
      676,  676,  676,  677,  677,    0,  677,  677,  677,  677,
      677,  677,  678,  678,    0,  678,  678,  678,  678,  678,

      678,  679,  679,    0,  679,  679,  679,  679,  679,  679,
      680,  680,    0,  680,  680,  680,  680,  680,  680,  681,
      681,    0,  681,  681,  681,  681,  681,  681,  682,    0,
        0,    0,  682,  682,  682,  682,  682,  683,    0,    0,
        0,  683,  683,  683,  683,  683,  684,    0,    0,    0,
      684,  684,  684,  684,  684,  685,    0,    0,    0,  685,
      685,  685,  685,  685,  686,    0,    0,    0,  686,  686,
      686,  686,  686,  687,    0,    0,    0,  687,  687,  687,
      687,  687,  688,    0,    0,    0,  688,  688,  688,  688,
      688,  689,    0,    0,    0,  689,  689,  689,  689,  689,

      690,    0,    0,    0,  690,  690,  690,  690,  690,  691,
        0,    0,    0,  691,  691,  691,  691,  691,  692,    0,
        0,    0,  692,  692,  692,  692,  692,  693,    0,    0,
        0,  693,  693,  693,  693,  693,  694,    0,    0,    0,
      694,  694,  694,  694,  694,  695,    0,    0,    0,  695,
      695,  695,  695,  695,  696,    0,    0,    0,  696,  696,
      696,  696,  696,  697,    0,    0,    0,  697,  697,  697,
      697,  697,  698,    0,    0,    0,  698,  698,  698,  698,
      698,  699,    0,    0,    0,  699,  699,  699,  699,  699,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  701,

      701,  701,  701,  701,  701,  701,  701,  701,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  703,    0,    0,
        0,  703,  703,  703,  703,  703,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  708,    0,    0,    0,  708,  708,  708,  708,
      708,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      710,    0,    0,    0,  710,  710,  710,  710,  710,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  712,    0,

        0,    0,  712,  712,  712,  712,  712,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  717,    0,    0,    0,  717,  717,  717,
      717,  717,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  719,    0,    0,    0,  719,  719,  719,  719,  719,
      720,    0,    0,    0,  720,  720,  720,  720,  720,  721,
      721,    0,  721,  721,  721,  721,  721,  721,  722,  722,
        0,  722,  722,  722,  722,  722,  722,  723,    0,    0,

      723,  723,  723,  723,  723,  723,  724,    0,    0,    0,
      724,  724,  724,  724,  724,  725,    0,    0,    0,  725,
      725,  725,  725,  725,  726,    0,    0,    0,  726,  726,
      726,  726,  726,  727,    0,    0,    0,  727,  727,  727,
      727,  727,  728,    0,    0,    0,  728,  728,  728,  728,
      728,  729,    0,    0,    0,  729,  729,  729,  729,  729,
      730,    0,    0,    0,  730,  730,  730,  730,  730,  731,
        0,    0,    0,  731,  731,  731,  731,  731,  732,    0,
        0,    0,  732,  732,  732,  732,  732,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[27] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
#line 2 "shell.l"
#include "y.tab.hh"
#include "shell.hh"
#include "command.hh"
#include <cstring>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>
#include <string>
#include <vector>

extern "C" char * read_line();

int mygetc(FILE * f) {
        static char *p;
        char ch;
        if(!isatty(0)) {
                return getc(f);
        }
        if(p == NULL || *p == 0) {
                char * s = read_line();
                p=s;
        }
        ch = *p;
        p++;
        return ch;
}
#undef getc
#define getc(f) mygetc(f)

extern int errorCode;
extern int lastID;
extern std::vector<std::vector<std::string>> historyTable;
static void yyunput (int c, char *buf_ptr);
void myunputc(int c) {
        unput(c);
}
#line 3024 "lex.yy.cc"
#line 3025 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

                        int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT

    static void yyunput ( int c, char *buf_ptr  );

#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
        if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
                { \
                int c = '*'; \
                int n; \
                for ( n = 0; n < max_size && \
                             (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
                        buf[n] = (char) c; \
                if ( c == '\n' ) \
                        buf[n++] = (char) c; \
                if ( c == EOF && ferror( yyin ) ) \
                        YY_FATAL_ERROR( "input in flex scanner failed" ); \
                result = n; \
                } \
        else \
                { \
                errno=0; \
                while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
                        { \
                        if( errno != EINTR) \
                                { \
                                YY_FATAL_ERROR( "input in flex scanner failed" ); \
                                break; \
                                } \
                        errno=0; \
                        clearerr(yyin); \
                        } \
                }\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
        YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
        yy_state_type yy_current_state;
        char *yy_cp, *yy_bp;
        int yy_act;

        if ( !(yy_init) )
                {
                (yy_init) = 1;

#ifdef YY_USER_INIT
                YY_USER_INIT;
#endif

                if ( ! (yy_start) )
                        (yy_start) = 1; /* first start state */

                if ( ! yyin )
                        yyin = stdin;

                if ( ! yyout )
                        yyout = stdout;

                if ( ! YY_CURRENT_BUFFER ) {
                        yyensure_buffer_stack ();
                        YY_CURRENT_BUFFER_LVALUE =
                                yy_create_buffer( yyin, YY_BUF_SIZE );
                }

                yy_load_buffer_state(  );
                }

        {
#line 43 "shell.l"


#line 3245 "lex.yy.cc"

        while ( /*CONSTCOND*/1 )                /* loops until end-of-file is reached */
                {
                yy_cp = (yy_c_buf_p);

                /* Support of yytext. */
                *yy_cp = (yy_hold_char);

                /* yy_bp points to the position in yy_ch_buf of the start of
                 * the current run.
                 */
                yy_bp = yy_cp;

                yy_current_state = (yy_start);
yy_match:
                do
                        {
                        YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
                        if ( yy_accept[yy_current_state] )
                                {
                                (yy_last_accepting_state) = yy_current_state;
                                (yy_last_accepting_cpos) = yy_cp;
                                }
                        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                                {
                                yy_current_state = (int) yy_def[yy_current_state];
                                if ( yy_current_state >= 494 )
                                        yy_c = yy_meta[yy_c];
                                }
                        yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
                        ++yy_cp;
                        }
                while ( yy_base[yy_current_state] != 10388 );

yy_find_action:
                yy_act = yy_accept[yy_current_state];
                if ( yy_act == 0 )
                        { /* have to back up */
                        yy_cp = (yy_last_accepting_cpos);
                        yy_current_state = (yy_last_accepting_state);
                        yy_act = yy_accept[yy_current_state];
                        }

                YY_DO_BEFORE_ACTION;

                if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
                        {
                        int yyl;
                        for ( yyl = 0; yyl < yyleng; ++yyl )
                                if ( yytext[yyl] == '\n' )

    yylineno++;
;
                        }

do_action:      /* This label is used only to access EOF actions. */

                switch ( yy_act )
        { /* beginning of action switch */
                        case 0: /* must back up */
                        /* undo the effects of YY_DO_BEFORE_ACTION */
                        *yy_cp = (yy_hold_char);
                        yy_cp = (yy_last_accepting_cpos);
                        yy_current_state = (yy_last_accepting_state);
                        goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 45 "shell.l"
{
        return GREATERTHAN;
}
        YY_BREAK
case 2:
YY_RULE_SETUP
#line 49 "shell.l"
{
        return PIPE;
}
        YY_BREAK
case 3:
YY_RULE_SETUP
#line 53 "shell.l"
{
        return LESSTHAN;
}
        YY_BREAK
case 4:
YY_RULE_SETUP
#line 57 "shell.l"
{
        return TWOGREATERTHAN;
}
        YY_BREAK
case 5:
YY_RULE_SETUP
#line 61 "shell.l"
{
        return GREATERAND;
}
        YY_BREAK
case 6:
YY_RULE_SETUP
#line 65 "shell.l"
{
        return GREATGREATERTHAN;
}
        YY_BREAK
case 7:
YY_RULE_SETUP
#line 69 "shell.l"
{
        return GREATGREATERAND;
}
        YY_BREAK
case 8:
YY_RULE_SETUP
#line 73 "shell.l"
{
        return AND;
}
        YY_BREAK
case 9:
YY_RULE_SETUP
#line 77 "shell.l"
{
        yylval.cpp_string = new std::string(getenv("HOME"));
        return WORD;
}
        YY_BREAK
case 10:
YY_RULE_SETUP
#line 82 "shell.l"
{
        std::string command = std::string(yytext);
        command.erase(0,1);
        std::string path = "/homes/";
        path.append(command);
        yylval.cpp_string = new std::string(path);
        return WORD;
}
        YY_BREAK
case 11:
YY_RULE_SETUP
#line 91 "shell.l"
{
        std::string command = std::string(yytext);
        command.erase(0,1);
        std::string path = "/homes/";
        path.append(command);
        yylval.cpp_string = new std::string(path);
        return WORD;
}
        YY_BREAK
case 12:
YY_RULE_SETUP
#line 100 "shell.l"
{
        int processID = getpid();
        char id[100];
        sprintf(id, "%d", processID);
        yylval.cpp_string = new std::string(id);
        return WORD;
}
        YY_BREAK
case 13:
YY_RULE_SETUP
#line 108 "shell.l"
{
        char code[10];
        sprintf(code,"%d",errorCode);
        yylval.cpp_string = new std::string(code);
        return WORD;
}
        YY_BREAK
case 14:
YY_RULE_SETUP
#line 115 "shell.l"
{
        char id[100];
        sprintf(id, "%d", lastID);
        yylval.cpp_string = new std::string(id);
        return WORD;
}
        YY_BREAK
case 15:
YY_RULE_SETUP
#line 122 "shell.l"
{
        std::vector<std::string> list = historyTable[historyTable.size()-1];
        std::string command = list[list.size()-1];
        yylval.cpp_string = new std::string(command);
        return WORD;
}
        YY_BREAK
case 16:
YY_RULE_SETUP
#line 129 "shell.l"
{
        char absolute[100];
        char * shellPath = realpath(Shell::currentCommand.path[0],absolute);
        yylval.cpp_string = new std::string(shellPath);
        return WORD;
}
        YY_BREAK
case 17:
YY_RULE_SETUP
#line 136 "shell.l"
{
        std::string command = std::string(yytext);
        std::size_t firstDollar = command.find_first_of("$");
        std::size_t firstFBracket = command.find_first_of("{");
        std::size_t firstBBracket = command.find_first_of("}");
        std::string c1 = command.substr(firstFBracket+1,firstBBracket - firstFBracket - 1);
        char * environment = getenv(c1.c_str());
        command.replace(firstDollar,c1.size()+3,std::string(environment),c1.size()-c1.size());
        firstDollar = command.find_first_of("$");
        firstFBracket = command.find_first_of("{");
        firstBBracket = command.find_first_of("}");
        if(firstDollar != std::string::npos){
                std::string c2 = command.substr(firstFBracket+1,firstBBracket - firstFBracket - 1);
                char * environment = getenv(c2.c_str());
                command.replace(firstDollar,c2.size()+3,std::string(environment),c2.size()-c2.size());
        }
        yylval.cpp_string = new std::string(command);
        return WORD;
}
        YY_BREAK
case 18:
YY_RULE_SETUP
#line 156 "shell.l"
{
        if(isatty(0)){
                printf("Good bye!!");
                printf("\n");
        }
        exit(1);
}
        YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 164 "shell.l"
{
        return NEWLINE;
}
        YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 168 "shell.l"
{
        char command[strlen(yytext)];
        int i;
        for(i = 1; i < strlen(yytext); i++){
                if(yytext[i] == '\"') {
                        break;
                }else{
                        command[i-1] = yytext[i];
                }
        }
        command[i-1] = '\0';
        yylval.cpp_string = new std::string(command);
        return WORD;
}
        YY_BREAK
case 21:
YY_RULE_SETUP
#line 183 "shell.l"
{
        std::string command = std::string(yytext);
        if(command.at(0) == '\'') {
                command = command.substr(1,command.size()-1);
                command.append("\nexit\n");
        }else if(command.at(0) == '$') {
                command = command.substr(2,command.size()-3);
                command.append("\nexit\n");
        }

        int inPipe[2];
        int outPipe[2];
        int inTemp = dup(0);
        int outTemp = dup(1);
        pipe(inPipe);
        pipe(outPipe);

        dup2(inPipe[0],0);
        dup2(outPipe[1],1);
        close(inPipe[0]);
        close(outPipe[1]);

        write(inPipe[1],command.c_str(),command.size());
        close(inPipe[1]);

        int newProcess = fork();
        if(newProcess == 0){
                char ** path = new char*[2];
                path[0] = (char*)"/proc/self/exe";
                path[1] = NULL;
                execvp("/proc/self/exe",path);
        }else{
                waitpid(newProcess,NULL,0);

                dup2(inTemp,0); close(inTemp);
                dup2(outTemp,1); close(outTemp);

                char * buf = new char[1024];
                int readInt = read(outPipe[0],buf,1024);
                close(outPipe[0]);

                for(int i = readInt - 1; i >= 0; --i){
                        if(buf[i] == '\n'){
                                buf[i] = '\t';
                        }
                        myunputc(buf[i]);
                }
                delete buf;
        }
}
        YY_BREAK
case 22:
YY_RULE_SETUP
#line 234 "shell.l"
{
        std::string command = std::string(yytext);
        command.erase(0,7);
        yyin = fopen(command.c_str(),"r");
        if(!yyin){perror("yyin"); BEGIN(INITIAL);}
        yypush_buffer_state(yy_create_buffer(yyin, YY_BUF_SIZE));
        BEGIN(INITIAL);
}
        YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 243 "shell.l"
{
        yypop_buffer_state();
        if(!YY_CURRENT_BUFFER) {
                yyterminate();
        }
}
        YY_BREAK
case 23:
YY_RULE_SETUP
#line 250 "shell.l"
{
        char command[strlen(yytext)];
        int j = 0;
        for(int i = 0; i < strlen(yytext); i++){
                if(yytext[i] == '\\') {
                        command[j] = yytext[i+1];
                        j++;
                        i++;
                }else{
                        command[j] = yytext[i];
                        j++;
                }
        }
        command[j] = '\0';
        yylval.cpp_string = new std::string(command);
        return WORD;
}
        YY_BREAK
case 24:
YY_RULE_SETUP
#line 268 "shell.l"
{

}
        YY_BREAK
case 25:
YY_RULE_SETUP
#line 272 "shell.l"
{
        yylval.cpp_string = new std::string(yytext);
        return WORD;
}
        YY_BREAK
case 26:
YY_RULE_SETUP
#line 276 "shell.l"
ECHO;
        YY_BREAK
#line 3628 "lex.yy.cc"

        case YY_END_OF_BUFFER:
                {
                /* Amount of text matched not including the EOB char. */
                int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

                /* Undo the effects of YY_DO_BEFORE_ACTION. */
                *yy_cp = (yy_hold_char);
                YY_RESTORE_YY_MORE_OFFSET

                if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
                        {
                        /* We're scanning a new file or input source.  It's
                         * possible that this happened because the user
                         * just pointed yyin at a new source and called
                         * yylex().  If so, then we have to assure
                         * consistency between YY_CURRENT_BUFFER and our
                         * globals.  Here is the right place to do so, because
                         * this is the first action (other than possibly a
                         * back-up) that will match for the new input source.
                         */
                        (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
                        YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
                        YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
                        }

                /* Note that here we test for yy_c_buf_p "<=" to the position
                 * of the first EOB in the buffer, since yy_c_buf_p will
                 * already have been incremented past the NUL character
                 * (since all states make transitions on EOB to the
                 * end-of-buffer state).  Contrast this with the test
                 * in input().
                 */
                if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
                        { /* This was really a NUL. */
                        yy_state_type yy_next_state;

                        (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

                        yy_current_state = yy_get_previous_state(  );

                        /* Okay, we're now positioned to make the NUL
                         * transition.  We couldn't have
                         * yy_get_previous_state() go ahead and do it
                         * for us because it doesn't know how to deal
                         * with the possibility of jamming (and we don't
                         * want to build jamming into it because then it
                         * will run more slowly).
                         */

                        yy_next_state = yy_try_NUL_trans( yy_current_state );

                        yy_bp = (yytext_ptr) + YY_MORE_ADJ;

                        if ( yy_next_state )
                                {
                                /* Consume the NUL. */
                                yy_cp = ++(yy_c_buf_p);
                                yy_current_state = yy_next_state;
                                goto yy_match;
                                }

                        else
                                {
                                yy_cp = (yy_c_buf_p);
                                goto yy_find_action;
                                }
                        }

                else switch ( yy_get_next_buffer(  ) )
                        {
                        case EOB_ACT_END_OF_FILE:
                                {
                                (yy_did_buffer_switch_on_eof) = 0;

                                if ( yywrap(  ) )
                                        {
                                        /* Note: because we've taken care in
                                         * yy_get_next_buffer() to have set up
                                         * yytext, we can now set up
                                         * yy_c_buf_p so that if some total
                                         * hoser (like flex itself) wants to
                                         * call the scanner after we return the
                                         * YY_NULL, it'll still work - another
                                         * YY_NULL will get returned.
                                         */
                                        (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                                        yy_act = YY_STATE_EOF(YY_START);
                                        goto do_action;
                                        }

                                else
                                        {
                                        if ( ! (yy_did_buffer_switch_on_eof) )
                                                YY_NEW_FILE;
                                        }
                                break;
                                }

                        case EOB_ACT_CONTINUE_SCAN:
                                (yy_c_buf_p) =
                                        (yytext_ptr) + yy_amount_of_matched_text;

                                yy_current_state = yy_get_previous_state(  );

                                yy_cp = (yy_c_buf_p);
                                yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                                goto yy_match;

                        case EOB_ACT_LAST_MATCH:
                                (yy_c_buf_p) =
                                &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                                yy_current_state = yy_get_previous_state(  );

                                yy_cp = (yy_c_buf_p);
                                yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                                goto yy_find_action;
                        }
                break;
                }

        default:
                YY_FATAL_ERROR(
                        "fatal flex scanner internal error--no action found" );
        } /* end of action switch */
                } /* end of scanning one token */
        } /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *      EOB_ACT_LAST_MATCH -
 *      EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *      EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
        char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
        char *source = (yytext_ptr);
        int number_to_move, i;
        int ret_val;

        if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
                YY_FATAL_ERROR(
                "fatal flex scanner internal error--end of buffer missed" );

        if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
                { /* Don't try to fill the buffer, so this is an EOF. */
                if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
                        {
                        /* We matched a single character, the EOB, so
                         * treat this as a final EOF.
                         */
                        return EOB_ACT_END_OF_FILE;
                        }

                else
                        {
                        /* We matched some text prior to the EOB, first
                         * process it.
                         */
                        return EOB_ACT_LAST_MATCH;
                        }
                }

        /* Try to read more data. */

        /* First move last chars to start of buffer. */
        number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

        for ( i = 0; i < number_to_move; ++i )
                *(dest++) = *(source++);

        if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
                /* don't do the read, it's not guaranteed to return an EOF,
                 * just force an EOF
                 */
                YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

        else
                {
                        int num_to_read =
                        YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

                while ( num_to_read <= 0 )
                        { /* Not enough room in the buffer - grow it. */

                        /* just a shorter name for the current buffer */
                        YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

                        int yy_c_buf_p_offset =
                                (int) ((yy_c_buf_p) - b->yy_ch_buf);

                        if ( b->yy_is_our_buffer )
                                {
                                int new_size = b->yy_buf_size * 2;

                                if ( new_size <= 0 )
                                        b->yy_buf_size += b->yy_buf_size / 8;
                                else
                                        b->yy_buf_size *= 2;

                                b->yy_ch_buf = (char *)
                                        /* Include room in for 2 EOB chars. */
                                        yyrealloc( (void *) b->yy_ch_buf,
                                                         (yy_size_t) (b->yy_buf_size + 2)  );
                                }
                        else
                                /* Can't grow it, we don't own it. */
                                b->yy_ch_buf = NULL;

                        if ( ! b->yy_ch_buf )
                                YY_FATAL_ERROR(
                                "fatal error - scanner input buffer overflow" );

                        (yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

                        num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
                                                number_to_move - 1;

                        }

                if ( num_to_read > YY_READ_BUF_SIZE )
                        num_to_read = YY_READ_BUF_SIZE;

                /* Read in more data. */
                YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
                        (yy_n_chars), num_to_read );

                YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
                }

        if ( (yy_n_chars) == 0 )
                {
                if ( number_to_move == YY_MORE_ADJ )
                        {
                        ret_val = EOB_ACT_END_OF_FILE;
                        yyrestart( yyin  );
                        }

                else
                        {
                        ret_val = EOB_ACT_LAST_MATCH;
                        YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
                                YY_BUFFER_EOF_PENDING;
                        }
                }

        else
                ret_val = EOB_ACT_CONTINUE_SCAN;

        if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
                /* Extend the array by 50%, plus the number we really need. */
                int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
                YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
                        (void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
                if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
                        YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
                /* "- 2" to take care of EOB's */
                YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
        }

        (yy_n_chars) += number_to_move;
        YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
        YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

        (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

        return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
        yy_state_type yy_current_state;
        char *yy_cp;

        yy_current_state = (yy_start);

        for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
                {
                YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
                if ( yy_accept[yy_current_state] )
                        {
                        (yy_last_accepting_state) = yy_current_state;
                        (yy_last_accepting_cpos) = yy_cp;
                        }
                while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                        {
                        yy_current_state = (int) yy_def[yy_current_state];
                        if ( yy_current_state >= 494 )
                                yy_c = yy_meta[yy_c];
                        }
                yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
                }

        return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *      next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
        int yy_is_jam;
        char *yy_cp = (yy_c_buf_p);

        YY_CHAR yy_c = 1;
        if ( yy_accept[yy_current_state] )
                {
                (yy_last_accepting_state) = yy_current_state;
                (yy_last_accepting_cpos) = yy_cp;
                }
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                {
                yy_current_state = (int) yy_def[yy_current_state];
                if ( yy_current_state >= 494 )
                        yy_c = yy_meta[yy_c];
                }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
        yy_is_jam = (yy_current_state == 493);

                return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
        char *yy_cp;

    yy_cp = (yy_c_buf_p);

        /* undo effects of setting up yytext */
        *yy_cp = (yy_hold_char);

        if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
                { /* need to shift things up to make room */
                /* +2 for EOB chars. */
                int number_to_move = (yy_n_chars) + 2;
                char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
                                        YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
                char *source =
                                &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

                while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
                        *--dest = *--source;

                yy_cp += (int) (dest - source);
                yy_bp += (int) (dest - source);
                YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
                        (yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

                if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
                        YY_FATAL_ERROR( "flex scanner push-back overflow" );
                }

        *--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

        (yytext_ptr) = yy_bp;
        (yy_hold_char) = *yy_cp;
        (yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
        int c;

        *(yy_c_buf_p) = (yy_hold_char);

        if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
                {
                /* yy_c_buf_p now points to the character we want to return.
                 * If this occurs *before* the EOB characters, then it's a
                 * valid NUL; if not, then we've hit the end of the buffer.
                 */
                if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
                        /* This was really a NUL. */
                        *(yy_c_buf_p) = '\0';

                else
                        { /* need more input */
                        int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
                        ++(yy_c_buf_p);

                        switch ( yy_get_next_buffer(  ) )
                                {
                                case EOB_ACT_LAST_MATCH:
                                        /* This happens because yy_g_n_b()
                                         * sees that we've accumulated a
                                         * token and flags that we need to
                                         * try matching the token before
                                         * proceeding.  But for input(),
                                         * there's no matching to consider.
                                         * So convert the EOB_ACT_LAST_MATCH
                                         * to EOB_ACT_END_OF_FILE.
                                         */

                                        /* Reset buffer status. */
                                        yyrestart( yyin );

                                        /*FALLTHROUGH*/

                                case EOB_ACT_END_OF_FILE:
                                        {
                                        if ( yywrap(  ) )
                                                return 0;

                                        if ( ! (yy_did_buffer_switch_on_eof) )
                                                YY_NEW_FILE;
#ifdef __cplusplus
                                        return yyinput();
#else
                                        return input();
#endif
                                        }

                                case EOB_ACT_CONTINUE_SCAN:
                                        (yy_c_buf_p) = (yytext_ptr) + offset;
                                        break;
                                }
                        }
                }

        c = *(unsigned char *) (yy_c_buf_p);    /* cast for 8-bit char's */
        *(yy_c_buf_p) = '\0';   /* preserve yytext */
        (yy_hold_char) = *++(yy_c_buf_p);

        if ( c == '\n' )

    yylineno++;
;

        return c;
}
#endif  /* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{

        if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
                YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
        }

        yy_init_buffer( YY_CURRENT_BUFFER, input_file );
        yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{

        /* TODO. We should be able to replace this entire function body
         * with
         *              yypop_buffer_state();
         *              yypush_buffer_state(new_buffer);
     */
        yyensure_buffer_stack ();
        if ( YY_CURRENT_BUFFER == new_buffer )
                return;

        if ( YY_CURRENT_BUFFER )
                {
                /* Flush out information for old buffer. */
                *(yy_c_buf_p) = (yy_hold_char);
                YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
                YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
                }

        YY_CURRENT_BUFFER_LVALUE = new_buffer;
        yy_load_buffer_state(  );

        /* We don't actually know whether we did this switch during
         * EOF (yywrap()) processing, but the only time this flag
         * is looked at is after yywrap() is called, so it's safe
         * to go ahead and always set it.
         */
        (yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
        (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
        (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
        yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
        (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
        YY_BUFFER_STATE b;

        b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
        if ( ! b )
                YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

        b->yy_buf_size = size;

        /* yy_ch_buf has to be 2 characters longer than the size given because
         * we need to put in 2 end-of-buffer characters.
         */
        b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
        if ( ! b->yy_ch_buf )
                YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

        b->yy_is_our_buffer = 1;

        yy_init_buffer( b, file );

        return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{

        if ( ! b )
                return;

        if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
                YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

        if ( b->yy_is_our_buffer )
                yyfree( (void *) b->yy_ch_buf  );

        yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
        int oerrno = errno;

        yy_flush_buffer( b );

        b->yy_input_file = file;
        b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;

        errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
        if ( ! b )
                return;

        b->yy_n_chars = 0;

        /* We always need two end-of-buffer characters.  The first causes
         * a transition to the end-of-buffer state.  The second causes
         * a jam in that state.
         */
        b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
        b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

        b->yy_buf_pos = &b->yy_ch_buf[0];

        b->yy_at_bol = 1;
        b->yy_buffer_status = YY_BUFFER_NEW;

        if ( b == YY_CURRENT_BUFFER )
                yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
        if (new_buffer == NULL)
                return;

        yyensure_buffer_stack();

        /* This block is copied from yy_switch_to_buffer. */
        if ( YY_CURRENT_BUFFER )
                {
                /* Flush out information for old buffer. */
                *(yy_c_buf_p) = (yy_hold_char);
                YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
                YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
                }

        /* Only push if top exists. Otherwise, replace top. */
        if (YY_CURRENT_BUFFER)
                (yy_buffer_stack_top)++;
        YY_CURRENT_BUFFER_LVALUE = new_buffer;

        /* copied from yy_switch_to_buffer. */
        yy_load_buffer_state(  );
        (yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yypop_buffer_state (void)
{
        if (!YY_CURRENT_BUFFER)
                return;

        yy_delete_buffer(YY_CURRENT_BUFFER );
        YY_CURRENT_BUFFER_LVALUE = NULL;
        if ((yy_buffer_stack_top) > 0)
                --(yy_buffer_stack_top);

        if (YY_CURRENT_BUFFER) {
                yy_load_buffer_state(  );
                (yy_did_buffer_switch_on_eof) = 1;
        }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
        yy_size_t num_to_alloc;

        if (!(yy_buffer_stack)) {

                /* First allocation is just for 2 elements, since we don't know if this
                 * scanner will even need a stack. We use 2 instead of 1 to avoid an
                 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
                (yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
                                                                (num_to_alloc * sizeof(struct yy_buffer_state*)
                                                                );
                if ( ! (yy_buffer_stack) )
                        YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

                memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

                (yy_buffer_stack_max) = num_to_alloc;
                (yy_buffer_stack_top) = 0;
                return;
        }

        if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

                /* Increase the buffer to prepare for a possible push. */
                yy_size_t grow_size = 8 /* arbitrary grow size */;

                num_to_alloc = (yy_buffer_stack_max) + grow_size;
                (yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
                                                                ((yy_buffer_stack),
                                                                num_to_alloc * sizeof(struct yy_buffer_state*)
                                                                );
                if ( ! (yy_buffer_stack) )
                        YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

                /* zero only the new slots.*/
                memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
                (yy_buffer_stack_max) = num_to_alloc;
        }
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
        YY_BUFFER_STATE b;

        if ( size < 2 ||
             base[size-2] != YY_END_OF_BUFFER_CHAR ||
             base[size-1] != YY_END_OF_BUFFER_CHAR )
                /* They forgot to leave room for the EOB's. */
                return NULL;

        b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
        if ( ! b )
                YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

        b->yy_buf_size = (int) (size - 2);      /* "- 2" to take care of EOB's */
        b->yy_buf_pos = b->yy_ch_buf = base;
        b->yy_is_our_buffer = 0;
        b->yy_input_file = NULL;
        b->yy_n_chars = b->yy_buf_size;
        b->yy_is_interactive = 0;
        b->yy_at_bol = 1;
        b->yy_fill_buffer = 0;
        b->yy_buffer_status = YY_BUFFER_NEW;

        yy_switch_to_buffer( b  );

        return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{

        return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
        YY_BUFFER_STATE b;
        char *buf;
        yy_size_t n;
        int i;

        /* Get memory for full buffer, including space for trailing EOB's. */
        n = (yy_size_t) (_yybytes_len + 2);
        buf = (char *) yyalloc( n  );
        if ( ! buf )
                YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

        for ( i = 0; i < _yybytes_len; ++i )
                buf[i] = yybytes[i];

        buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

        b = yy_scan_buffer( buf, n );
        if ( ! b )
                YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

        /* It's okay to grow etc. this buffer, and we should throw it
         * away when we're done.
         */
        b->yy_is_our_buffer = 1;

        return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
                        fprintf( stderr, "%s\n", msg );
        exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
        do \
                { \
                /* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
                yytext[yyleng] = (yy_hold_char); \
                (yy_c_buf_p) = yytext + yyless_macro_arg; \
                (yy_hold_char) = *(yy_c_buf_p); \
                *(yy_c_buf_p) = '\0'; \
                yyleng = yyless_macro_arg; \
                } \
        while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int yyget_lineno  (void)
{

    return yylineno;
}

/** Get the input stream.
 *
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 *
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 *
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 *
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 *
 */
void yyset_lineno (int  _line_number )
{

    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 *
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{

    /* Pop the buffer stack, destroying each element. */
        while(YY_CURRENT_BUFFER){
                yy_delete_buffer( YY_CURRENT_BUFFER  );
                YY_CURRENT_BUFFER_LVALUE = NULL;
                yypop_buffer_state();
        }

        /* Destroy the stack itself. */
        yyfree((yy_buffer_stack) );
        (yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{

        int i;
        for ( i = 0; i < n; ++i )
                s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
        int n;
        for ( n = 0; s[n]; ++n )
                ;

        return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
                        return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{

        /* The cast to (char *) in the following accommodates both
         * implementations that use char* generic pointers, and those
         * that use void* generic pointers.  It works with the latter
         * because both ANSI C and C++ allow castless assignment from
         * any pointer type to void*, and deal with argument conversions
         * as though doing an assignment.
         */
        return realloc(ptr, size);
}

void yyfree (void * ptr )
{
                        free( (char *) ptr );   /* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 276 "shell.l"
